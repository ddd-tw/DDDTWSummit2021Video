Hello Taiwan, my name is Stefan Hofer, and I love a good story.
So imagine it was 20,000 years ago.
It is in the middle of winter and the tribe of cave people sit around a warm fire.
It is quiet except for the cracking firewood, 
then one of the elders clears their throat.
Many summers ago, 
a large herd of bison wandered through our hunting grounds 
It was the largest herd that anyone had ever seen.
And as the elder shares his story one of the cave people starts to use colorful rocks and coal to paint a picture.
And to this very day, we can see this picture in the cave wall.
In the sense that is what we want to do with the domain storytelling.
We want to spark a fire, tell a story and paint a picture.
Storytelling is at the heart of human communication and it still works in the age of software.
Domain storytelling is one of the techniques that brings domain experts,  
product owners, business analysts, and software development teams together.
It helps them to overcome misunderstandings
and to establish a common language 
that helps you to talk about business processes and requirements
or in short to build better business software.
Today, I'm going to introduce you to domain storytelling by showing you a short demo.
then I will explain the method 
and finally, I will tell you a little bit about the influence that 
DDD had on domain storytelling and maybe also the influence that 
DDD has that domain storytelling has on DDD in its community.
So I will tell you another story.
This time it is about a software system 
that my colleagues and I built a couple of years ago.
It's a software system that was supposed to help approve roadwork. 
So what happened was with a group of stakeholders 
and they already had a set of requirements.
They said the system must support issuing permits 
and the sector system must support hearings, 
and we need support on reviewing applications and 
many more use cases.
so the problem was that we didn't really understand how all these 
isolated requirements make up a whole software system 
for for proving roadwork we hadn't really understood the basic business processes behind it 
so how does a proving roadwork typically work 
that was the questions that we asked our domain experts 
when we brought him together in a room 
and in front of a whiteboard 
and this is the story that holders.
So construction company has won a tender for a roadwork project 
and before they can start they need to obtain a permit so that they can close the road to traffic 
so the story starts where the project supervisor awards the contract to the construction company 
and then they can submit the application for the permit using this new software system that we were supposed to build
now the stakeholders told us that the project supervisor should be notified 
whenever a new application comes in because they need to review the application 
and compare it with the tender documents 
We didn't understand that requirement at first 
and they explained us well there can be 
for example different dates in the application than in the tender documents 
if for example the construction company doesn't have the necessary resources
or maybe the weather has changed 
then they need to delay the construction work 
and that's why dates could differ in the application for the permit and in the tender documents
so once the application is reviewed 
another role comes into play a traffic authority 
they draft the permit
and they determine the concerned authorities for a hearing 
so concerned authorities 
those are for example: police, communities, public transport, 
everyone who could be affected by a construction site 
and they get a link to the hearing documents 
and can review the permit 
and they can submit statements 
where they say either it's okay or they can raise concerns 
like maybe they have a marathon planned or something like that 
that would have an influence on the construction site
So the traffic authority then considers these statements and issues the permit
and the permit is then sent to the construction company
Now this whole hearing process here and drafting the permit 
and revising the draft considering the statements made by the concerned authorities 
that is something that can be repeated several times 
but in this story we looked at a happy path scenario 
so everything is fine 
the first draft becomes the final permit 
and this is often a typical way 
of using domain storytelling we start with a happy path and then later look into a more complicated variations of the process
So this little story and visualizing that story helped us to understand in much more detail 
what the system was supposed to do
and this is one of the typical cases for using domain storytelling to think about 
new software systems and how they should support business processes
Now, how does this method work
Many people especially software developers tend to think about 
business processes and visualize business processes like this 
as a rather abstract but complete description of everything that could possibly happen 
So it's about different paths in one picture 
With the main storytelling we choose a different approach 
We think that a good example is better than a bad abstraction
So we want examples first and from that knowledge from that foundation we can later build abstractions in our software
so usual usually it's sufficient to model two or three of the most important versions of the business process so the happy path maybe an important variation or common error scenario 
so if we look at individual paths 
and therefore we don't need any 
any gateways or switches or ifs or case statements in our pictographic language
Now domain stories can have different scopes 
The story that I showed you about the construction site was 
I would say about medium on a medium level of detail 
To give you some more idea how domain stories can can look I'll introduce you to another example 
this time it's about a movie theater 
so on the left side we see the process of going to the movies 
so this is a end-to-end business process from the customer's point of view 
so we have a moviegoer here they buy a ticket 
from a cashier and then you buy snacks and drinks from a concession stand
and they showed a ticket to the usher to get access to the movie theater and so on
On the right side we see a much more detailed picture 
that tells you the story of buying tickets we have a moviegoer 
who picks seats and buys for the tickets and so on 
so time buying tickets was one step in the course grade story on the left 
and it's now a whole story on its own in the more detailed story on the right 
and that's just one way of illustrating different scopes of stories
now no matter the level of detail or the scope of the story you will always need a pictographic language to visualize it
So our pictographic language is comprised of a set of symbols
So we have actors, the person or the people or the software systems
who are active in the story who do things 
and we have work objects those are the things that they use it can be information, physical things
digital objects with activities depicted as arrows and we use textual annotations
now to give those icons a concrete meaning we label them so we have a customer ticket bias and so on 
and if we look at the pictographic language in a little bit more detail
we can have for example different actors so most commonly 
we use a single person, a group of people, a system but depending on the domain 
that you're in you can change and adapt the set of symbols 
for example I did a couple of the main stories in 
in the harbor domain
so ships are important actors there and then have a little ship icon that represents a ship
the same is true for the work objects we also use different icons there 
most commonly to express the medium of a book object 
so for example if I call the cashier in the box office of the cinema and ask about a reservation for a movie tonight
and then I would draw this with a telephone icon
if they then send me a reservation as an email. I will use this email icon 
and if I decide to print the reservation at home. I will use the document icon 
with that pictographic language we can build sentences and the idea is that 
the sentence in the pictographic language reads almost like 
you would write a natural language sentence 
now to tell a story we of course need more than one sentence 
So what do we do. We append sentences and we express the order by numbering them 
So that's how you find your way through the domain story
now the pictographic language is just one aspect of the main storytelling 
equally if not more important is that it is also a workshop format a way of bringing people together 
and what happens in the minds of the participants of the bookshop 
is very important so it's the picture is not just it's not the only result 
also being there being present in the workshop 
if you miss this campfire experience it's not the same just looking at the result 
showing the picture to someone who was not at a workshop
that's not the same as actually being there and contributing to it
so what do we need for a workshop. well we need people to tell us a story the story tells 
and what is a storyteller without someone who listens so we need listeners 
our storytellers are usually the domain experts, users stakeholders 
and our listeners are usually members of a development team, 
business analysts, usability experts and so on.
And often we don't have just one storyteller but we have several storytellers so every role that is involved in a business process can contribute to the story
Now storytelling is not just a one-way activity. It's more of a dialogue of a discussion.
So storytellers or domain experts are not always born storytellers
so they needs a little help that's where moderator comes 
comes in handy and also the listeners can ask questions to move disturbing forward 
So typically we would ask what's happening next or how do you know that you have to do this now 
or where do you get the information from to write it down somewhere and so on 
so we want the vivid conversation that moves forward 
and while the story is told it is important that it is also visualized 
and that's again a job that the moderator has 
So we visualize the story using the pictographic language while it is told 
so that gives everyone a chance to see if 
we understood the story correctly or after any mistakes in it 
so what will happen is that the domain experts so tell us say "oh no you missed a step" 
or "no that's not what I said I used a different word" or "can you draw the arrow to... can you turn it around this is wrong" 
so this is very available and immediate feedback that we get 
for that to work everyone needs to be able to see the visualized story 
so we use tools for that for example we can use 
whiteboards and sticky notes or digital blackboards 
or we could use the tool that I used to show you 
the old work story it's called "Egon.io" it's open source runs in your browser 
you can check it out egon.io is also the url. 
Now there's a lot more of course to discuss and learn about domain storytelling
I've written a book about this method together with my colleague Henning Schwentner 
so if you are curious go and check out domainstorytelling.org you will find all sorts of links there including links to the book 
and you can even save some money if you buy directly from Edison Wesley via the informant store
You can use this coupon code "DOMAINSTORY" and get a nice discount.
Now how has domain storytelling influenced DDD and how is DDD influenced domain storytelling 
Well, so far I haven't really talked about DDD. 
In fact I've barely even talked about software or developing software or modeling software 
and that is because domain storytelling 
is a modeling method that helps you to have meaningful conversations about business processes 
So building software for this processes is just one of many use cases for the main storytelling 
you could use it to analyze weaknesses and problems 
or you could use it to help newly hired employees to learn about your business 
People do that and are happy with it.
However I mostly use it in software development projects 
and there are some projects where I use domain storytelling like this
so I would start with analyzing 
the domain analyzing the problem spaced as-is situation 
modeling it together with the domain experts so they get a couple of domain stories out from that 
It is something that we can learn from get feedback from 
We used it as a basis to design a new improved process software supported process 
We model that with to-be domain stories that show us the future situation 
Again we get feedback from that 
we use that to derive requirements 
on a course grade or a medium grade level for example user stories or use cases 
and again we get feedback on those requirements 
and then we build software and of course we develop it iteratively and incrementally 
that means we only take a couple of those requirements and refine them 
and when you go to the next sprint iteration we take 
another set of requirements and refine them so it's a constant process of refinement 
Now this process is or this description of software development
is not entirely wrong but it's certainly not completely right 
It's a bit too waterfally for me and that changed with domain driven design
In more and more of my projects, I get to use DDD. 
And Eric Evans provided his own metaphor for the software development cycle. 
That metaphor is the model exploration whirlpool and it looks like that.
So the whirlpool metaphor suggests that there are interconnected cycles of storytelling modeling and coding. 
And it is about learning and about making mistakes 
So we have activities that focus on housing and documenting, 
scenarios and modeling them, telling stories, 
walking through them, refocus, 
proposing models, explore the language 
and take those models turn them into code to learn from that experiment 
then go back to your scenarios
and model more scenarios and other cases and so on 
So it's this constant whirlpool.
I think this model captures much better what is actually going on 
in a DDD style development project. 
on the other hand this model is not as neat as the one I showed you before it looks a bit messy 
and maybe that is the reason why this metaphor is often 
neglected. When people talk about DDD.
Yet, I think the more... 
The more I think about it. The more I reflect on it. The more powerful this metaphor becomes for me. 
And I mean it's easy to see that 
When you highlight how often the term scenario or story appears 
in the in the whirlpool that there's a connection to the main storytelling.
So for me 
domain storytelling fills this gap of how to actually 
gather my my scenarios how do I model them. 
But how to return them? how bring...
How do I bring them closer to developing software?
So that's a way that domain storytelling can help with this model exploration whirlpool makes it more tangible 
but it also had an influence on domain storytelling 
because it helps me to better understand how to integrate 
the main storytelling into the domain driven design process 
and it helps me to choose the right scope for a story 
so which level of granularity am I interested in 
Am I analyzing the current process 
or am I deciding a new process and so on
so I think this is very helpful for that 
for choosing the right scope of a story
now the second aspect that 
has influenced the main storytelling and the development of the method 
is collaborative modeling
Before I became a DDD practitioner 
and a DDD coach I was active in the academic modeling community 
and the software and enterprise architecture communities 
and in the requirements engineering community 
and I always felt a bit like an outsider. 
And one of the reasons why this is different with the DDD community is that 
DDD practitioners have realized the value of collaborative modeling
While I had felt that for some time it really became evident to me 
At explore DDD conference in the U.S. where Paul Rayner drew this picture. 
It shows collaborative modeling is one of the most important concepts of DDD.
It's one of its pillars 
So I felt right at home, of course.
While I'd felt that for some 
time that collaborative modeling is 
an important pillar of DDD 
I think that many people use it synonymously with 
EventStorming ever since Alberto Brandolini came up with it. 
So I use EventStorming too. Here you see my colleagues 
in a big picture EventStorming session 
or some of my colleagues 
and I think of it as 
well I have a modeling toolbox 
and in this toolbox there are several tools 
like EventStorming and domain storytelling 
and I think that 
in many projects 
you will have to use more than one modeling method 
and you definitely have an advantage 
if there are several tools in your toolbox and you know how to choose 
between those tools and when to choose which tool 
that will increase your changes your chance of success
Now thinking of it as a toolbox is one way of seeing it 
but I think collaborative modeling could also be described as a family of methods 
with different relationships between them and 
the more I became experienced with DDD 
and the more I looked at collaborative modeling as this family
So in my mind I would say that 
by now I see software development as a series of conversations 
that are aided by modeling 
with different members of this collaborative modeling family so with different tools 
The community behind those methods or tools 
They've started to write a book 
called the Visual Collaboration Tools book you can find it on leanpub 
and download it from there 
so this is a really thriving community 
and it's great to see that this family is ever expanding 
and to see new connections made between those tools 
So this is definitely something that has influenced me a lot
Now the final thought I want to share with you today is 
one of the most important concepts I think in DDD 
and that is that language and models are bounded by their context 
So this is really an eye opener
I mean words can mean different things to different people, right. 
So even if those people work in the same organization they might have different ideas 
For example in our movie theater what could ticket mean 
So for one person it could be a sellable unit that generates a profit 
and for the other person it could mean a piece of paper that is validated in order to grant access to a movie theater.
So if you look at this course-grade domain story from before again 
Cashier might think of the ticket as something that they sell it has a price and so on.
and they are sure well they are not really interested in the price 
they are just checking if it's the right date and time right movie and then the ground access 
So they both say ticket but they mean different concepts when they mean "ticket". 
Now this will often happen in 
coarse-grained domain stories or also other 
collaborative modelling techniques that when you have different stakeholders 
to use the same terms without meaning exactly the same thing. 
and this is not necessarily a problem 
especially on this coarse-grained level. 
but I'll I want to show you an example where it really was a problem for me 
to moderate the modeling session 
because there was an immediate problem 
that luckily I could resolve with the help of bounded contexts 
So this is yet another domain that tell you about this time it's a 
fixtures company called awesome browser games 
so a company that provides a platform for playing browser games 
but it's based on a true story
so in the workshop in a real workshop we got different people from different departments together 
domain expert, software developers 
and we wanted to start with a course-grained domain story 
that shows us an end-to-end process 
so a first-time user signs up plays their first game gets built for the game 
So someone started and say well the first step is that the user opens an account with awesome browser games 
and immediately someone said no 
they said no the account is much, is created much later, I know that for a fact 
but the first person replied no no no no 
you are wrong this is the first step I know it I know that for a fact 
this is the first thing that we do we open the account
well in the words of Rartin Fowler 
"A single conceptual model is a tricky beast to work with" 
and that was what we were trying to do here build a single conceptual model 
for terms that could not be reconciled
so bounded contexts to the rescue what did we do to resolve this situation move on forward 
well I said okay let's assume for a moment that 
the first person is right and that the account is open in the first step and then the continued modeling 
and eventually arrived at the step here the step five in the picture 
where the second person thinks that their account is created 
and we used different icons to show that 
we mean different things here so different kinds of accounts possibly 
and when we talked about it it became evident 
that one person thought about 
the account in the context of use user registration 
and the other person 
was thinking about accounts in the context of 
what we call the game management 
so there are actually two kinds of accounts here. 
one that are per user and the other one is per user and per game 
so if you play different games you have different accounts one for each game 
So luckily we had this 
concept of bounded context that helped us to resolve this issue 
otherwise I don't think the workshop would have been a success but with this 
revelation and we could move on forward and had a successful workshop 
and actually you can use this kind of differences in languages to 
spot and find and identify bounded context 
so that's also a way how we use domain storytelling for finding bounded contexts 
You've actually seen another example already where 
we used bounded context and we remodeled them in a domain story 
and that was of course the cinema example 
So again on the left in the coursed-grain story we see in the rectangles different contexts 
So we have ticket sales and snack sales and entrance control 
and in the more detailed domain story 
that story plays within one context within the ticket sales context 
and of course we want to make sure that within the ticket sales context 
we have the same idea of the of the terms that are used there so 
that we need our ubiquitous language right
So these are the three things where I think 
DDD has really influenced domain storytelling 
and influenced its development and also my personal modeling practices 
So we have this idea of the model exploration whirlpool 
a powerful metaphor a bit neglected in the DDD community sadly 
and we have this this big big community of collaborative modeling 
that is not only within DDD but also extending to other communities 
like behavior different development for example
and we have this game-changing concept of bounded context 
so the idea that language and models are bounded by the context 
that really changed my modeling practices.
Now if you want to know more about domain storytelling 
go check out domainstorytelling.org 
You will find my slides on speaker deck 
and now I'm looking forward for your questions, thank you.
Okay thank you very much about Dr. Stefan Hofer's sharing.
and right now let me see what's question that the participants asked.
so there are a lot of questions on slido right 
Yeah! okay. Can you see my screen? 
Yes, I can. 
Okay the first question is 
I saw there is no round-trip between each components, 
could you tell us what motivated you to 
create this 1-way direction to express the message flow?
So I think this question refers to the 
roadwork construction example that I gave 
if I'm correct 
um yeah so um  
This is something very typical for software developers 
we often think in this kind of request response 
a pattern um or yeah or like you 
you call a method and then you get a return value or something like that 
I mean you can use the main storytelling in that way 
but often I think it's the better idea to 
to use it to express an intention. 
otherwise the the picture becomes very messy with a lot of 
back and forth, and back and forth, and back and forth without really gaining 
without pushing the story forward 
so the idea is that you express intention 
and not necessarily things like
you know you enter something in the system in the web page you press the button 
and then the web page renders a new html page and then you press the next button 
and then it renders a new html page 
this would be very boring that's not a good story 
there's not a lot of information in it that's that drives the conversation forward
so that's what I want to avoid and I focus more on 
what is the intention of this step 
and then it's okay to have just a one-way information flow 
or one way direction 
yeah so that's that's the idea. 
Okay, thank you for your answer.
And the second question is  
have you ever met someone asking about the compression 
between domain story telling and even storming? 
How do you think about it?
Again that is a very common question 
and as you saw in the in the slides
I put one picture of our event stopping session in there 
that I facilitated 
so I use both methods 
plus many more 
I would say for the last 
three years or so I've used event storming and domain storytelling about
to the same amount like 50 50 something like that
there is an overlap 
there are situations where you can use one or the other and will still get a good result out of it 
but there are also situations where I think one is better than the other 
and one of the indicators for me is 
what is this process about or 
what information are you looking to 
to learn what what are interested in 
if it's about many people collaborating with each other 
so if you have a business process it involves 
many people or even many software systems 
and information goes from one person to the next and back 
and you're interested in the communication patterns 
and and learning how people collaborate 
then I think 
domain storytelling is the better approach 
because the story is centered around the the people around the actors 
and you can really see who is doing what 
with whom 
if on the other hand you're more interested in this time series 
like in evenstorming you have this timeline from left to right 
and status changes 
and this happened better and that happened that happened 
then event storming is is I think the better approach 
but as I said um 
I use I use both there are situations where you can use both 
and you can also combine it
for example in the project that I'm currently working on 
we started with domain storytelling to figure out the the process 
that this new software system should build 
and then the development team decided they want to implement the software using event sourcing 
so for big picture level we had domain stories 
and for design level for the system design 
we switched to event storming because it fits much better to an event-sourced way of building systems 
there are more ways to combine it I have to refer you to the book for that 
we have a couple of examples there 
yeah so 
Okay, thank you very much. 
Okay, the third question is 
can domain storytelling be used as a methodlogy 
or a tool for class design in the impolementation of DDD tactical design?
I think there was a follow-up from 
Kim in the in the chat 
so it depends on different perspective and how much focus you're looking 
for in time series consequences or the actors relationships yes yes I think that's right 
that's uh it's a good summary 
Okay now to the next question sorry. 
So can the domain storytelling be used as a methodology or a tool for class design.
Yes, it can.
The funny thing about it is that 
domain storytelling well its predecessors are actually rather old 
so the first ancestor the first predecessor is from the 1990s 
and it was heavily influenced by object oriented modeling 
so you can still still see that influence and 
I think it is suitable as a tool for class modeling 
when you want an object oriented approach 
and it also fits nicely into the the DDD thinking 
because you can look at the work objects and say okay 
this is going to be either an entity or aggregate or maybe a value object 
and the arrows that depict the activities 
well those are the um 
that is the behavior of the entities and the work objects 
so for example 
in this construction example we had permits and we had hearings 
and the hearing was started then statements um are considered 
and these are all the things that later become entities and aggregates 
so a hearing for example we model the hearing as an aggregate 
and and stuff like that so that works 
What do you need for that you need domain storytelling that you. 
Sorry, you need domain stories that are rather fine-grained 
so if you're on a very overview level this wouldn't work 
but if if you model it rather fine-drained 
then you have enough language and enough expressiveness in the model 
that you can defer object-oriented design from that
Okay, thank you very much.
and the next question is 
domain storytelling as a methodology of implementing DDD 
what do you think is advantage? and what about the disadvantage?
Most of the time I used domain storytelling as a communication tool 
and the thing that is 
apart from what I just explained from that from the previous question with
how you can use it to implement it 
but mostly um 
I think it's about bringing people people together 
having meaningful conversations about the domain 
and that is something that domain storytelling is uh really good at helping with this 
so this would be the the main advantage 
and um 
then you can drive the conversation into different directions for example you can use it to find uh 
bounded contexts so that would be a typical way of using it 
uh to implement DDD 
or you can use it on a lower level 
to to come up with object oriented 
design using entities and aggregates and so on 
what about disadvantages 
well I'm a bit biased here of course I really love the main storytelling so
it's it's hard to think about disadvantages but 
now with the feedback 
okay um but um well maybe let's put it this way 
it's not the right tool for everything 
so that's why I always talk about this toolbox 
and um I've had situations where 
I thought using this  this modeling method is a good idea 
and then we go into the workshop and it just doesn't work 
for some reason for for whatever reason 
and then it's always good if you have this toolbox of other modeling tools 
and say okay I'm sorry this conversation is not going forward 
but I have an idea uh 
let's use for example 
let's use example mapping to to to figure that out or 
let's use event storming and then you can switch 
so um I think this would be a disadvantage like um 
treating it as a one-size-fits-all tool for every situation that's not going to work 
you you will need different tools in your toolbox
okay and the next is uh 
domain storytelling suitable as a DDD implementation necessary in complex domain 
Such as the banking or financial industry.
Yes, I think so for complex domains
my colleagues and I have have used this technique 
and its predecessors for uh 
15 years and we applied it in 
complex domains like healthcare, banking, insurance 
managing ports for example 
we had stuff like 
disaster management disaster disaster response teams 
so a whole lot of different domains logistics of course um e-commerce 
so it's not really bound to one domain it's really for 
for pretty much every domain 
so I have not encountered a domain yet where I say okay this doesn't fit here 
um yeah so I would definitely to say this is uh usable in complex domains 
Okay thank you for your presentation 
Have you run into a suitable where one object 
can either be a working object 
or an actor in different sequence of one dst image? 
How do we deal with it? 
That's a good question it's already a bit advanced 
so well 
within the domain of course it can happen that 
um in in one domain story something is an actor and in one domain is something is a work object 
similarly to in in one bounded context you can model something as an entity 
and in the next bounded context it's a value object because it doesn't change 
so that's possible but this question is about in the same picture in the same domain
again this is not a common case but it can happen 
for example um 
if we think about something like 
user management user registration you sign up for something 
you are the user you're the actor then 
I'm only as an actor and you open your account 
and then the system
creates a user as a representation 
of the of the human being 
then we have user as an actor and then we have user as a work object with the same picture 
but that's not a problem at all 
you just have to use a different icon to represent that 
 so I would use this little stick figure for the for the actor for the person 
and for example the icon set that I use that's the google material I can set 
they have another smaller picture of a user with a little check mark 
and that's the one that I typically use for stuff like 
um user account
um so that's um that's the way um how I deal with it 
so use different icons to represent those different concepts 
and then it works

Okay!
as the realization of protons or service product methodology 
or tool does domain storytelling usually 
it's a great with to foreign or complete agile development process 
from requirements analysis to system development
uh very nice so um
one of the tools of the methods 
that I use um a lot in combination with domain storytelling
is user story mapping why because of two reasons so
domain storytelling is always about scenarios so about typically