um

microsoft original director

so without further ado let's get started good morning i am so happy to be here and so honored to be keynoting the ddd taiwan conference this year especially with the theme being footprints of pioneers now i may not be a pioneer but i love the idea of footprints and everybody's learning journey for domain-driven design my name's julie lerman and i must admit not only am i not in taiwan with all of you right now which i wish i were um but i've also am providing you a recorded talk i'm recording this talk for you in advance just so that we don't have any issues with internet since i'm so far away where i am is in vermont in the u.s however i am online with you all today and will be available in the really really fun community area so i i am here but at the moment as i'm speaking i am not so i have um i am definitely somebody who's very passionate about domain driven design but i have spent a lot of time thinking and talking and worrying about how to make domain-driven design more accessible to people it's a really really big topic and that's what i'll be talking about today so the title of this talk is getting to domain of design pragmatic or principled and this will hopefully be helpful to you whether you're on your own journey into learning domain or uh domain driven design or if you are somebody who's already interested and excited about it and really looking for ways to help others learn about domain-driven design and i do want to give a little background about the first reason that i created this talk i was at domain different design europe and i do know that a lot of you are net developers so you might know me also from my involvement with entity framework and i was doing a workshop on entity framework at the ddd conference and after my workshop and some feedback from a few people i wrote this tweet about um entity framework core and domain driven design and used the word purists in the tweet and um i got in a little bit of trouble not trouble it just a few people were a little annoyed by my use of that term um so you know perhaps purists was one word or i could have also used the word principled instead of purists but you know the reason i wrote that tweet and the reason i am giving this talk to you today is to really look at if we could be more pragmatic about how we approach domain-driven design and learning domain-driven design but still retain the principles and the important guidelines and guidance that domain-driven design gives us and i use those words guidelines and guidance very intentionally i think a lot of people look for rules and definitions and when we have rules and definitions that definitely shuts out a lot of people because they're worried if i'm not following the rules exactly um so i want people to be able to use bene use ddd well and benefit from it um but not worry about having to be an expert from end to end of domain-driven design before you begin trying to leverage it in the way you approach building your software i have been with clients i even spent a week at a client at a very large company with a few teams that had gotten to the point where they did not want to hear anything about domain-driven design anymore and that was because of the way it had been presented to them by other members of their teams and these are more of the people who um the the people who were sharing it with them were of the mind that you need to know everything all at once before you can start and they just did not want to hear about it anymore um and you know so i'm really familiar with this problem and i i would like to say after the week that i spent there kind of you know backing up and giving them a new approach and a new entrance ramp uh to domain driven design that they felt so much better about it and i left there with them being really eager to continue their ddd learning so i want to play a game i want you to play a game and granted this is something i usually do with a live audience when i'm standing up on stage and you're all together in a room and i thought long and hard about how to recreate this when we're virtual so this is what we'll do normally what i would have you do is face the person next to you and play a mirror game where one person is drawing let's see like if i can do this in the if i'm my hands in the camera if i'm drawing the number two right as i'm drawing in and looks right to me it's totally backwards to you so i will be your partner and i just want you to try this you'll have to touch the screen but just do it in the air follow along with me and i kind of have to look over to make sure i've got this right so i'm not going to be looking right at you so try to follow me as i draw the number two so your your finger following my finger right so it's it's like you're in a mirror so there's the number two now we'll try the number four so here's four right and i'm i'm writing it so it's perfectly fine for me and then i'm going to draw the number six so go ahead and follow me oops i went off the camera there sorry now i'll do an eight i'll start up a little higher to get a little over to the left okay so now i'm going to draw the number eight uh let's do that again i don't know if i did it right because i was trying to make sure okay there's eight and now one more we'll do 10 okay so 10. let me go one and zero so how did it go uh was it a little harder than you expected it to be because everything was backwards um but you know of all those two four six eight and ten what do you think for you what was the easiest thing to draw now when i've been in rooms of people and ask um sometimes i hear four sometimes i hear eight but most often the answer which makes most sense to me is ten and the reason is because you're not really doing anything backwards when you're drawing a one if if you're drawing it just a simple straight line one right that's really easy and you know drawing a circle whether whichever way you draw it is is that is pretty easy and so i think of this game and and i do want to shout out to my friend jesse sternhoss who i saw her do this um at another conference where she was talking about using improvisation to help developers unlearn some bad habits so i adapted it for this so this isn't about unlearning it's about learning and so you know if you think about having to try to write all those numbers backwards like all at once and it might have been a little confusing and a little overwhelming but perhaps you had a little relief when you got to draw the one and the zero right and and this to me is an interesting expression of how i think it's more helpful for people to learn new concepts especially something as big as domain-driven design so what if i had started by just asking you to do a mirror of the number one right that's pretty easy and pretty easy to be successful at and maybe even one and zero or maybe we should account and we could start with zero and do the one right once you've done those like oh okay now i know how to do those and maybe you've got confidence to continue on to you know to do a two and a four and a six and an eight um and and this is really for me the idea of learning one thing at a time you know one thing where a you're getting confidence from it and b it's actually something that can be useful without having to know the whole thing is how i approach uh sharing domain-driven design with other people and and how if you're new to ddd i hope you'll be happy with learning that way and if you're somebody who's been doing dummy different design for a while you know think about this as you're sharing your love of domain-driven design with other people so for me starting with just pieces of domain-driven design right the core principles of domain-driven design instead of saying you know you need to read eric evans gdd book from page one all the way to the end before we can begin on a project now i'm not saying that you shouldn't have an understanding of the whole concept of domain-driven design that's really important but to really have pieces of it that you're using and implementing it's hard to learn all of them at once but you can still benefit by learning and understanding a piece of it and applying that and implementing that and then you can start growing your understanding and your use of the practices and patterns that we've learned from domain german design as opposed to saying hey here is the mind map of domain driven design and this is what we're going to learn right like i would turn around and run out of the room like oh my gosh it's too much and i have to say after going through the process my own little by little you know gaining more knowledge and more knowledge i have a pretty good understanding of this mind map but at the beginning when i first started learning about domain driven design there was no way it was overwhelming and it was confusing so you know or as opposed to having a picture of the mind map if somebody you know came into the room and said okay roll up your sleeves we're going to do domain driven design right or if you know you've never heard of ddd before done any of the practices okay we're going to use an aggregate root and we're going to use value objects and we're going to use this and we can use that and it's just like ah this it's so many terms and so many concepts and new things to understand so one of the things that i do a lot when i'm working with clients who are learning about domain german design instead of talking to them about aggregate roots like you know at the beginning aggregate roots and value objects and and aggregates and bonded context and ubiquitous language and all of these things which you know i understand this is the very first talk you're hearing at this conference so you'll be hearing a lot about these things throughout the next couple of days in the sessions and the workshops but what i do is instead of saying okay now we're going to start using aggregate roots i don't tell them the term i show them right i show them some code or maybe not even code we don't you know we don't really start with the idea of the code we start with the idea of the business problem that we're trying to solve so i kind of map some of that stuff out and we can talk about it and they understand it and then i let them know you know by the way and i should say i don't happen to start with this particular example um but you know whatever whichever concept from domain-driven design it is i'll start by showing it to them and once they have an understanding of it then i tell them okay in domain-driven design this has a particular name and it's important to understand those names those that terminology so that you can have conversations with other people about what you're doing and that parallels really interestingly to one of the concepts of domain-driven design it's referred to as ubiquitous language don't worry too much about what that is you'll learn more about it later um and you know that the term ubiquitous so it just means a language that's used everywhere and uh domain driven design itself in its terminology has its own language so it is important in domain-driven design we use that ubiquitous language so that we can communicate with each other about the domain about the problems that we're solving so as we step back as practitioners and we need to talk about what it is that we're what it is that we're doing in terms of the architecture or the modeling it is important to use and understand those terms so that we can all be on the same page and and have clarification on it i have been fortunate to be at a number of conferences where michael feathers has spoken and at one of them he was talking about inside out architecture and i thought about that um with respect to how i share domain driven design with people and it seemed to resonate right um instead of starting you know it's the same idea instead of starting with a language and with the terminologies and then showing what structure that represents i go the other way around right i show the structure and then i introduce the language so for me that that's how i see it as being inside out and also i know a lot of people like to use the gardening analogy but it works really well and it works for me i like to garden but i'm not a master gardener this is this is about where i am at these days although um even painting all those tires so beautifully might be above my pay grade as they say but you know this is this is how you can start right so this may not be master gardener level wonderful garden right but it's it's still a thing of beauty and and it's achieving a lot by creating beauty even though it's not you know amazing gardening like maybe all those plants are in their own little pots you buy them in a pot and you just stick them in there i don't know but there's a beautiful little garden right so with a little bit of knowledge about gardening you can still benefit and you can still achieve something beautiful and you know maybe eventually someday depending on how much free time you have um you'll get to this kind of a garden right but if you you know think about that with all of the different things you need to understand and know about domain driven design right you can start with a small amount and then you know if you're on a team there may be other people who have more knowledge and you can work together and they can mentor you as you gain more knowledge but you don't have to have that expertise going in so one of the most important concepts within all of domain-driven design is the bounded context and it's interesting that in recent years and so eric evans wrote the book on domain driven design and it was published in 2003. so when i say in recent years maybe within the last 10 years he has said numerous times that if he were to write the book over again he would start with a concept of bounded context because it's really so critical to domain-driven design but it's also the most potentially misunderstood concept in domain-driven design and i totally agree because i also had some i had to take a path into it right i did not understand it right away so the really high-level explanation of bounded context is when you're you're looking at your whole domain and you know the whole big business problem that you're trying to solve and it's just it's too many things going on all at once so what we do with the bounded context is we break it down into smaller solvable parts so aligning that to cells right these are cells and each of these cells is very bounded or constrained by the membranes these orange membranes that surround them and those membranes prevent the bounded contexts for those cells from communicating directly with each other from having to know about what's going on in the other cells right and having having to have all of that complexity added to their own problems right um and and also you know leaking information from one to another so with the cells like with a bounded context you can just focus on one small part of the problem and just don't worry about all the rest because like those membranes domain-driven design gives us wonderful ways that people have a lot of experience with of communicating between those cells giving you know taking information from one cell and sharing it with another cell so we those patterns all exist so you can actually say let me just focus on this one problem right i'm not going to worry about those other problems and suddenly life does become simpler i i promise you i i even apply the idea of bound you know these boundaries uh you know after dinner and there's dishes and food to put away and this problem going on in that and just like okay i'm just going to focus on one and oh okay i can handle washing the dishes right put them in the dryer iraq right okay now i'll go well maybe i should put the food away first okay so i'll take that problem first right but there's there's so much value to this concept of just breaking a big problem that is maybe overwhelming down into small problems and then each of the small problems you can solve right and much less stressful and then and then worry about the interactions of them because we have all those patterns so you don't have to worry about that so i've kind of driven towards this in this explanation of my path to domain driven design before i truly understood bounded context i definitely grasped the idea of boundaries and benefited from boundaries greatly before i was knowledgeable enough to really understand that context and implement bounded context and all that evolves around that um i'll take myself as an example so i i know a lot of you are net developers and you know so you knew know about entity framework um in the early days of the entity framework the way it worked was that you pointed it to a database the database might have you know legacy database might have you know 700 tables and 25 000 relationships and you point it there and create one big huge model from that and i would just look at that and say this this just can't be right it's so complex right so with the idea of boundaries uh that you know one of the early things i understood from domain-driven design i was able to look at these uh entity domain models and say oh wait a minute you know i i don't need to look at all of it at once let me just create a small model that's just you know these things because this these things all relate to each other and they're transactional and i can just focus on that and then you know slowly i'm pulling apart this huge model and have maybe i have a lot of a lot more things i'm dealing with but each of those things is so much simpler that it's overall a huge benefit to to have broken it down um and you know i do like to think of myself as a canary in the coal mine i don't know if you know this analogy um in in coal mines the air isn't very good down there and poor little canaries they would take these little canaries down into the coal mine and if the canary could still breathe then it was you know good chance that the coal miner would be safe but if the canary died sorry um then they knew it was it was terrible really um anyway now i'm really sad about the canary so we'll just go to um so i i feel like that with a lot of technology right uh i feel like if i can learn it you can learn it right entity framework i figured it out here i'll show you how to use it um and you know i had my path to domain driven design it was not the same as you know it wasn't i read the whole book and then i was like oh okay i understand it all now i'm gonna do it it was little by little by little so i actually want to share with you what that path was so i understood the concept of domain right like the the big the business the the business problem you're working on or maybe part of that business problem that you're trying to solve so i understood that that i was focused on and then i understood the concept of boundaries right and interestingly domain driven design when you read different books or courses etc they don't really focus on boundaries they go right into bounded context and you know so i looked about a context but i didn't really get all of it but i understood that concept of boundaries and you'll see it wasn't an immediate next step to bounded context from there i i started really understanding this idea of each uh each of the bounded contexts even though to me it was just something with a boundary could use should use separate databases and that you know that also sounds like like oh that's crazy why would you do that but you know we hear a lot more about that with microservices as well and uh you know the capability i think uh coming from somebody who's been programming for 30 years the idea of oh multiple databases you know sql server and thinking how expensive it is and everything like things are very very different now um but understanding why like not trying to put you know share everything all in one place how um how much simpler things get and these problems just start sorting themselves out by you know this this deep separation concerns by saying you know we're going to have our this data stored here and this data stored here not try to make it related and not try to normalize it and not try to share it for you know have data that has lots of different meanings right so um within these boundaries things have specific meanings and with those meanings will store them in their own database and again trusting that you know our our technology provides uh not only our technology but ideas from domain different design give us all kinds of ways to share that data so that didn't seem to i finally realized it took a while to realize it wasn't as big a deal as i originally thought then um and again i'm not here to teach you all of these different things because you've got two full days of sessions and workshops but you'll hear these things so the next thing that i really understood in domain driven design i started really understanding the idea of the aggregate root so like the um in an um in a graph of objects the objects that's responsible for all the business logic and the rules of that transactional unit from there i finally started understanding value objects and this is where i always have to stop and say value objects were the hardest thing for me to get my head around the further away i get from that the harder it might be for me to understand how hard it was but i will never forget how hard it was and that i learned i think it was like five completely different examples from books from conference talks from conversations that i had with different people or from different people um completely different perspective on describing what a value object was right and you know i got the first one and i didn't quite get it and the second one i didn't quite get it it wasn't until that fifth one and i'll tell you i was at i remember microsoft's tech ed conferences i was at a tech ed conference i was speaking but jimmy nielsen was also speaking and he gave an example of value objects that had something to do with eggs and an egg curtain and i can't remember exactly what it was i should go back and find a video of that but there was something about his explanation now it wasn't his explanation that was oh finally the perfect explanation but it but i had the ability to take what he was saying and put it together with all the other descriptions that i've heard and then putting them all together i finally finally went oh i get it okay i get it right so the reason i'm telling you that is here i am giving a keynote talk at a ddd conference right i want you to understand it doesn't just come to me like that it's just just because i'm here giving a conference talk and a keynote doesn't mean that you know oh i'm one of those people where everything's really easy i'm persistent so you know i kept at it um and you know it's just i just want you to know that so you know if you don't get it right away don't stress out about it don't beat yourself up about it right it's just it's normal and it's you know it's just a matter of uh hearing an explanation that is designed in the same pattern that your brain works right and that was me i had to take all these others together um now when i teach domain of a design especially you know the beginning getting started i have a pluralsight course on it that i did with my friend steve smith um i i tried to take the way that now i understand it to try to see if that is a more helpful way for people to first understand it anyway so value objects um i just you know like any of the other pieces here don't stress that by the time i heard that fifth explanation i already had all this other stuff kind of under my belt like i got it and understanding those things helped me finally get to my aggregate room and i've mentioned this before ubiquitous language this was something that um i think i had a hard time with it mostly because i saw the term too much too many times before i understood it and every you know and i started getting like those those uh developers at that client like i don't want to hear about ubiquitous language anymore i don't understand it and you just keep saying that word what is uh uh the princess bride you keep saying that word but i don't think you really know what it means well the people who are saying it did know what it means it's just you keep saying it i don't understand um now i understand right and and again it was just part of part of my path putting together all of these things pounded context finely gelled and bounded context is actually very tightly tied to ubiquitous language interesting and it's important to have that language so that when you're talking about a particular problem or problem set everybody's on the same page and you all know what you're talking about because oh we're in the context of um uh selling boots right so you know when we talk about heal right these are these are things in our business right that's a that's something within our business or we talk about you know certain aspects of manufacturing boots we we know that those specific to manufacturing boots some of those words the things that you do when you're manufacturing boots you might have the same word when you're manufacturing computers but it means something totally different because it's a whole different set of problems and the reason i'm harping on this a little bit right now is because i real i've learned that there's a lot of people who when they first learned about ubiquitous language they thought it meant throughout the entire domain across every single bounded context so i just want to leave you with that right that that's it's per bound of context so all of these things helped me understand better and better a bounded context um and then anti-corruption layers are just one of the patterns that we have for communicating uh data that needs to go maybe from one bound to context to another messages or events that need to to go um and i have that one in there specifically because again you know i i had this kind of brain freeze on anti-corruption layers interestingly not on what they were for but the actual name i always would stop and go acl right i remember acl and then i would say acl anti-corruption layers whenever i'm like trying to talk about them so all of these things little by little over time you know with the support of other people that i'm working with enabled me to finally grasp that full mind map of domain-driven design all right but along the way you know understanding boundaries before i understood bounded context already benefited me a great deal um you know and and throughout so i wanted to talk a little bit about um when i go in to work with a client and usually they're refactoring they're dealing with some legacy code and i just wanted to give you an idea of what it is that i'm doing and how i approach that so uh from for for you what this could mean is you know if you're on a team and you're dealing with legacy software and uh you know bringing the ideas and the guidance from domain german design into the mix so usually these clients are dealing with legacy software and what this might mean for you is you know if you're in that situation and you're trying to help your team or help others use domain driven design ideas to begin looking at the software and how you might start refactoring it this is this is somehow sometimes my approach so one of the things i'll do is work on you know and and look for these ideas as you go through the next couple of days i'll i'll work on a you know a transactional bundle of objects that go together for example if you're doing sales um an order with its line items right and an order we have certain rules about that order so what i do we do is we'll look at just that right that group of objects that travel uh through your application together and look to see if we can find boundaries right like for example you might say well it's a customer with an order with line items and products right and now we've got all the problems of maintaining the customer suddenly involved in this problem and you know so start i start looking for boundaries and and exploring that and we just do this on a whiteboard and you might keep turning it on its head right like just different perspectives but i don't talk about aggregate roots right i don't talk about value objects and you know bounded context i just say let's look at you know your domain and let's look at the problems you're trying to solve and you know let's just try to get some new perspective on them along the way then i'll say oh by the way we refer you know when we're talking using domain-driven design ideas we refer to this as an aggregate root or we refer to this as an aggregate or we refer to this as a value object or an entity or whatever then you know and then we just dig in and do a little more work go a little more deeply right and again just whiteboarding without terms right and then say oh by the way the thing that we just did this is you know in ddd it's called this and this and that so i intro slowly introduce the terms um as they get uh more accustomed to the concepts so we just go back and forth like that and eventually you know their garden this is more my style garden a little more of like i think it's called an english garden a little a little more wild but you know and it grows your your understanding of domain driven design grows and the um your ability to apply these ideas to the software you're building and gain the benefits that domain german design gives us which you know in my mind is to make my life simpler right to de-stress the subtitle of eric evans book is tackling complexity right tackling complexity so we take this like this might look complex right but it started from something small um and you know another thing i want to point out um some it's not that it's a criticism of this idea of learning domain-driven design little by little and i've heard other like ddd gurus um talk about you know do is is this approach is it really domain driven design or is it something like domain driven design light but when they say that right i think well that sounds kind of negative like it's just a lightweight version maybe maybe they even say l-i-t-e which you know l-i-g-h-t that's a wonderful thing right it's shining light on things but what they're saying is you know like a a lightweight version of ddd right which is not a terrible thing right in in a lot of people's minds but i prefer to think of it as ddd core right the the core elements of domain-driven design like you know really like you know learn that bounded context learn how to how to identify boundaries then you know and then dig in deeper um i so i i do prefer referring to it as as ddd core and then a few last things that i want to leave you with um that you know i think is really important to share when when you're talking about domain driven design first of all again as you'll learn throughout the next couple of days ddd is really made up of two really important areas one is strategic design where you do all this planning right where you figure out where these where those boundaries lie and then figure out how things relate to each other within those boundaries and then figure out you know how you're going to enable communication of messages or data between those boundaries so within strategic design you know that one of the most important things is about client collaboration which doesn't end with strategic design and you know focusing on you know when you are looking at the big big problem of your domain and you divide it up into smaller problem sets really you know identifying what is the most important piece that drives your business right what's unique about your business that uh really makes money right that that like what is the most important thing and really focusing on that um you know and then for me reducing the complexity which also reduces stress discovering those bounded contexts and boundaries and discovering that ubiquitous language within those bounded contexts then the other big piece of it is once you've done all that strategizing it's really time to start thinking about how you're going to put the code together right how you're going to implement these bound these domains these bounded contexts that you've defined during the strategic design and you know it does it can really lead you to writing better code um val you know value objects really are a beautiful thing and uh the same client that i went to where everybody like was saying i don't want to hear any more about domain-driven design the end of the last day one of the developers and this is a very very intelligent guy came up to me and said you know i never really thought about value objects before and now i realize how beautiful they are and how important they are and now i'm so excited about learning more about what ddd gives me right enables me to build better software like i almost you know some people would be like mike dropped me i was like almost crying when he said that um and you know there are really interesting things to learn about how we define relationships between our entities in domain-driven design aggregate root is you know all of these things as i learn them and as i see other people learning them on the aggregate routes and and the this importance uh one of the things that tdd really um helps is to eliminate like side effects like unexpected unanticipated side effects right because you don't have things that are just connected all over the place right things are really bound right so these these are the things that you define as your these are the benefits that we gain as we're working inside the bounded context and doing the implementation the tactical design so things that you can look forward to as you're learning more about domain-driven design so i hope this uh talking about these things will help you as you move through the the talks and the workshops of the next couple of days you're going to be inundated with all kinds of really amazing ideas and it may feel overwhelming but don't don't stress out about them right you can just kind of take it all in and it'll be back there when you're ready for it but you know find the things that really make the most sense to you and those are where you can start with so have a wonderful conference um and i look forward to chatting with you in the virtual community room it looks like so much fun i've had a little tour of it thank you so much

okay thanks ev thanks julie for his for her excellent speech and let's give her a round of applause silently in front of your computer okay thanks really okay silently yeah okay so i i love julie's speech very much her speech very much especially when the idea of don't tell just do and find some boundaries first and forget about all those dragons and get rules very objects first and focus on the demand okay the next part will be our uh we'll turn to slido and we have 10 more minutes for our qa sessions let me share my screen okay so if you haven't haven't post your question on the on the slider you have some minutes to do it and you can observe your favorite questions okay so okay

so julie so the first question is could you explain could you explain more on the difference between sub domain and bonding context

yeah that's actually a great question uh because um sometimes a sub when you identify the sub domain that has the same boundaries as the bounded context so so quite often they look like just the same piece of your domain but there are times and that's probably the most normal where once you've ident identified the sub-domain and then so i'm just going to back up a little bit so subdom the the sub domains are the things are what you look for first you don't start by looking for bounded context you look to identify the different sub domains and then you start talking about the subdomains this is when the ubiquitous language starts evolving and it's from that ubiquitous language that you start defining the bounded context so quite often the uh perimeter right that that which is the subdomain aligns perfectly with a bounded context but sometimes you might want you might find that you need to implement that subdomain as two different bounded contexts for one reason or another um and interestingly the i've got a a pluralsight course on called uh domain driven design fundamentals that i did with steve smith and when we first did the course we interviewed on video on camera we interviewed eric evans and um this was one of the questions we asked him and he also his his answer was more uh deeper than what i've just said um but if you do happen to watch that course you can also see eric um with the with the way that he helps explain how sometimes it's the same and sometimes it's different so a little hard to deeply answer that right now but i hope that helps a little bit

okay thanks julie oh that's a well explanation if you have more interested please check the videos with the interview with eric evans yeah yeah pluralsight is free this week through um through the seven it's been all week and through sunday the 17th it's free so if you don't even have a pluralsight subscription you can still go watch it whoa that's big surprise thanks thanks for sharing that oh

system with a history of more than 20 years how can we replace that system through ddd in stages interactively please yeah um that this is uh a very common conversation a very common question because uh most often people are dealing with legacy applications right not everybody gets to start with a brand new idea and and build it up from scratch and you you know nobody can just say okay we're just going to replace the whole thing all at once right it's it's hard it's like impossible to do there are actually quite a few patterns for for doing that um and people talk about that a lot when they talk about microservices when they talk about evolving their system into microservices but you know you need a plan there's no question about that and absolutely it's something that you know uh you would need to do iteratively um but first you know it you need to just kind of step back i think the most important first step is to look at the business almost like it's brand new like try to understand it from a very new perspective because the one thing you don't want to do is just rewrite the same logic that was how you thought about it 20 years ago and then just write it you know in new code right it's your the best opportunity to really step back and re-consider how data would you know how the data is moving around how um you know what the problems are what are the most important problems to to focus on um one other thing i want to say about that is when i'm helping people learn these techniques um what we do is we look for that low hanging fruit if you know that phrase like the eat kind of the easiest thing but that's not for the implementation that's just for learning like we do the easy thing because it's something easy to learn with but um doing that strategic design can also help you identify what the you know what your path is through the changes what's what's the most you know what is the most effective thing you can create the most quickly or um you know as you're learning so uh that that's a huge question so hopefully that's a little bit of an idea of where to begin yeah thanks julie that's very very useful

do you have an experience to work with a group of people that is not applying dvd on server side like mobile or desktop can you share something about that sure um personally i haven't been involved in that however um i've had a lot of conversations with people who have been doing it there are even a few people who uh speakers and and people who are writing and training that focus on and it's kind of unusual focus on domain driven design at for the front end which is really interesting you know applying the ideas but one of the most interesting stories that was shared with me was with somebody um who again with a they had a legacy app and the back end of that app worked perfectly and they didn't want to muck with it but they needed to have a a modern front end they needed to modernize the front end for their users because it was just so old-fashioned and they wanted something new so what they ended up doing was um

because they wanted to leave like their old db2 database intact and their old cobol code intact they built they found a cobalt developer to write an api in front of the cobalt logic and so their new user interface just talked to the api and then the api just let the cobalt logic do everything that it's always been able to do and they did something similar in front of the database they put an orm uh not ended i don't think it was a nad framework but an orm in front of db2 that allowed them to query out of the database without having to know how to interact with db2 and they were then able to apply uh and use really modern not just modern tools but modern software practices with the new stuff so it was really really interesting and i really think of that as domain driven design thinking to have come up with that solution okay thanks that's very insightful and knowledgeable okay so it's 9 50 here so our first speech ends here and let's give julie a very big big thanks okay thanks julie nice to meet you hope we can see you next year or in a few years yes thank you so much for inviting me it was it really was a pleasure yeah we are also honored to have you here so thank you bye-bye