0:00:00,0:00:03

首先，我想為各位介紹一下今天的KEYNOTE SPEAKER

0:00:03,0:00:04
也是 JULIE

00:00:04,00:00:08
他是一位DDD大師級的講師

00:00:16,00:00:20
不但有數十年軟體開發者經驗，也是一位非常資深的軟體教練與顧問

00:00:20,00:00:26
除了幫助團隊如何重新思考，與設計軟體架構，導入現代化的開發實務外

00:00:26,00:00:30
也協助團隊如何使用DDD去建模，去開發程式

00:00:30,00:00:37
她擁有非常多傲人的頭銜,不但是 Docker Captain, Pluralsight 的講師社群發起人

00:00:37,00:00:43
專業講師也有多年的NET教育經驗， MVP，也是 Microsoft regional director

00:00:43,00:00:52a
有這麼多傲人的經歷，但是他本身卻在社群的第一線，為大家引進各種

00:00:52,00:00:59
新進的技術，幫助團隊更有效率的前進開發他們心目中的軟體

00:00:59,00:01:09
那麼，接下來請我們議程組的志工，播放接下來的演講, 

0:01:10.000,0:01:13.080
so without further ado let's get started

0:01:13.080,0:01:16.080 
good morning i am so happy to be here and

0:01:16.800,0:01:22.720
so honored to be keynoting the DDD Taiwan 
conference this year especially with the

0:01:22.720,0:01:29.440
theme being footprints of pioneers, so i 
may not be a pioneer but i love the idea

0:01:29.440,0:01:35.840
of footprints and everybody's learning journey 
for domain-driven design. My name's Julie Lerman

0:01:35.840,0:01:42.720
and i must admit not only and i not in taiwan 
with all of you right now which i wish i were

0:01:43.280,0:01:51.280
um but i've also am providing you a recorded talk 
i'm recording this talk for you in advance just

0:01:51.280,0:01:57.360
so that we don't have any issues with internet 
since i'm so far away where i am is in Vermont

0:01:57.360,0:02:06.880
in the US however i am online with you all today 
and will be available in the really really fun

0:02:06.880,0:02:16.640
community area so i i am here but at the moment as 
i'm speaking i am not so i have um i am definitely

0:02:16.640,0:02:22.640
somebody who's very passionate about domain driven 
design but i have spent a lot of time thinking

0:02:22.640,0:02:29.040
and talking and worrying about how to make 
domain-driven design more accessible to people

0:02:29.040,0:02:36.160
it's a really really big topic and that's what 
i'll be talking about today so the title of this

0:02:36.160,0:02:43.920
talk is getting to domain of design pragmatic or 
principled and this will hopefully be helpful to

0:02:43.920,0:02:50.160
you whether you're on your own journey into 
learning domain or uh domain driven design

0:02:50.160,0:02:56.080
or if you are somebody who's already interested 
and excited about it and really looking for ways

0:02:56.080,0:03:01.360
to help others learn about domain-driven design 
and i do want to give a little background about

0:03:01.360,0:03:07.680
the first reason that i created this talk 
i was at domain different design europe

0:03:07.680,0:03:13.200
and i do know that a lot of you are net developers 
so you might know me also from my involvement with

0:03:13.200,0:03:19.200
entity framework and i was doing a workshop 
on entity framework at the DDD conference

0:03:19.200,0:03:25.840
and after my workshop and some feedback from 
a few people i wrote this tweet about um

0:03:26.720,0:03:34.960
entity framework core and domain driven design and 
used the word purists in the tweet and um i got in

0:03:34.960,0:03:41.040
a little bit of trouble not trouble it just a 
few people were a little annoyed by my use of

0:03:41.040,0:03:49.440
that term um so you know perhaps purists was one 
word or i could have also used the word principled

0:03:49.440,0:03:57.520
instead of purists but you know the reason i wrote 
that tweet and the reason i am giving this talk

0:03:57.520,0:04:04.720
to you today is to really look at if we could be 
more pragmatic about how we approach domain-driven

0:04:04.720,0:04:10.880
design and learning domain-driven design but 
still retain the principles and the important

0:04:10.880,0:04:17.360
guidelines and guidance that domain-driven design 
gives us and i use those words guidelines and

0:04:17.360,0:04:23.680
guidance very intentionally i think a lot of 
people look for rules and definitions and when

0:04:23.680,0:04:30.400
we have rules and definitions that definitely 
shuts out a lot of people because they're worried

0:04:30.400,0:04:38.560
if i'm not following the rules exactly um so i 
want people to be able to use bene use DDD well

0:04:39.280,0:04:48.560
and benefit from it um but not worry about having 
to be an expert from end-to-end of domain-driven

0:04:48.560,0:04:55.840
design before you begin trying to leverage it 
in the way you approach building your software

0:04:56.480,0:05:01.600
i have been with clients i even spent a 
week at a client at a very large company

0:05:02.240,0:05:07.520
with a few teams that had gotten to the 
point where they did not want to hear

0:05:07.520,0:05:13.280
anything about domain-driven design anymore 
and that was because of the way it had been

0:05:13.280,0:05:21.120
presented to them by other members of their 
teams and these are more of the people who um

0:05:21.120,0:05:27.840
the the people who were sharing it with them 
were of the mind that you need to know everything

0:05:28.720,0:05:34.640
all at once before you can start and they 
just did not want to hear about it anymore

0:05:35.200,0:05:42.240
um and you know so i'm really familiar with this 
problem and i i would like to say after the week

0:05:42.240,0:05:47.760
that i spent there kind of you know backing 
up and giving them a new approach and a new

0:05:47.760,0:05:54.400
entrance ramp uh to domain driven design that they 
felt so much better about it and i left there with

0:05:54.400,0:06:03.200
them being really eager to continue their DDD 
learning so i want to play a game i want you

0:06:03.200,0:06:08.640
to play a game and granted this is something i 
usually do with a live audience when i'm standing

0:06:08.640,0:06:14.960
up on stage and you're all together in a room and 
i thought long and hard about how to recreate this

0:06:15.760,0:06:22.000
when we're virtual so this is what we'll do 
normally what i would have you do is face the

0:06:22.000,0:06:27.520
person next to you and play a mirror game where 
one person is drawing let's see like if i can do

0:06:27.520,0:06:33.840
this in the if i'm my hands in the camera if i'm 
drawing the number two right as i'm drawing in and

0:06:33.840,0:06:40.880
looks right to me it's totally backwards to you 
so i will be your partner and i just want you to

0:06:40.880,0:06:46.000
try this you'll have to touch the screen but just 
do it in the air follow along with me and i kind

0:06:46.000,0:06:49.920
of have to look over to make sure i've got this 
right so i'm not going to be looking right at you

0:06:49.920,0:06:56.240
so try to follow me as i draw the number two so 
your your finger following my finger right so it's

0:06:56.240,0:07:01.840
it's like you're in a mirror so there's the number 
two now we'll try the number four so here's four

0:07:02.400,0:07:07.680
right and i'm i'm writing it so it's perfectly 
fine for me and then i'm going to draw the number

0:07:07.680,0:07:13.680
six so go ahead and follow me oops i went off the 
camera there sorry now i'll do an eight i'll start

0:07:13.680,0:07:18.320
up a little higher to get a little over to the 
left okay so now i'm going to draw the number

0:07:18.320,0:07:23.680
eight uh let's do that again i don't know if i 
did it right because i was trying to make sure

0:07:24.240,0:07:33.760
okay there's eight and now one more we'll 
do 10 okay so 10. let me go one and zero so

0:07:34.320,0:07:41.040
how did it go uh was it a little harder than you 
expected it to be because everything was backwards

0:07:41.920,0:07:50.400
um but you know of all those two four six eight 
and ten what do you think for you what was the

0:07:50.400,0:07:56.160
easiest thing to draw now when i've been in 
rooms of people and ask um sometimes i hear

0:07:56.720,0:08:02.800
four sometimes i hear eight but most often 
the answer which makes most sense to me is ten

0:08:03.360,0:08:07.920
and the reason is because you're not really 
doing anything backwards when you're drawing

0:08:07.920,0:08:12.400
a one if if you're drawing it just a simple 
straight line one right that's really easy

0:08:12.400,0:08:18.160
and you know drawing a circle whether whichever 
way you draw it is is that is pretty easy and

0:08:18.880,0:08:25.440
so i think of this game and and i do want to 
shout out to my friend jesse sternhoss who

0:08:25.440,0:08:31.680
i saw her do this um at another conference 
where she was talking about using improvisation

0:08:31.680,0:08:38.400
to help developers unlearn some bad habits so i 
adapted it for this so this isn't about unlearning

0:08:38.400,0:08:45.680
it's about learning and so you know if you think 
about having to try to write all those numbers

0:08:45.680,0:08:50.240
backwards like all at once and it might have been 
a little confusing and a little overwhelming but

0:08:50.240,0:08:56.640
perhaps you had a little relief when you got to 
draw the one and the zero right and and this to me

0:08:56.640,0:09:02.880
is an interesting expression of how i think it's 
more helpful for people to learn new concepts

0:09:02.880,0:09:09.520
especially something as big as domain-driven 
design so what if i had started by just asking

0:09:09.520,0:09:16.240
you to do a mirror of the number one right that's 
pretty easy and pretty easy to be successful at

0:09:16.240,0:09:20.480
and maybe even one and zero or maybe we should 
account and we could start with zero and do the

0:09:20.480,0:09:27.680
one right once you've done those like oh okay 
now i know how to do those and maybe you've got

0:09:27.680,0:09:34.640
confidence to continue on to you know to do a 
two and a four and a six and an eight um and

0:09:34.640,0:09:42.160
and this is really for me the idea of learning 
one thing at a time you know one thing where A

0:09:42.160,0:09:47.440
you're getting confidence from it and B it's 
actually something that can be useful without

0:09:47.440,0:09:54.960
having to know the whole thing is how i approach 
uh sharing domain-driven design with other people

0:09:54.960,0:10:01.440
and and how if you're new to DDD i hope 
you'll be happy with learning that way

0:10:01.440,0:10:05.520
and if you're somebody who's been doing 
domain-driven design for a while you know

0:10:05.520,0:10:12.800
think about this as you're sharing your love of 
domain-driven design with other people so for me

0:10:14.080,0:10:20.080
starting with just pieces of domain-driven design 
right the core principles of domain-driven design

0:10:20.080,0:10:26.720
instead of saying you know you need to read eric 
evans DDD book from page one all the way to the

0:10:26.720,0:10:32.480
end before we can begin on a project now i'm not 
saying that you shouldn't have an understanding

0:10:32.480,0:10:38.720
of the whole concept of domain-driven design 
that's really important but to really have pieces

0:10:38.720,0:10:43.040
of it that you're using and implementing 
it's hard to learn all of them at once

0:10:44.080,0:10:51.600
but you can still benefit by learning and 
understanding a piece of it and applying

0:10:51.600,0:10:57.120
that and implementing that and then you can 
start growing your understanding and your use

0:10:57.120,0:11:03.280
of the practices and patterns that we've learned 
from domain-driven design as opposed to saying

0:11:04.000,0:11:11.200
hey here is the mind map of domain driven design 
and this is what we're going to learn right like

0:11:11.200,0:11:17.120
i would turn around and run out of the room like 
oh my gosh it's too much and i have to say after

0:11:17.120,0:11:22.800
going through the process my own little by little 
you know gaining more knowledge and more knowledge

0:11:22.800,0:11:27.360
i have a pretty good understanding of this mind 
map but at the beginning when i first started

0:11:27.360,0:11:32.800
learning about domain driven design there was 
no way it was overwhelming and it was confusing

0:11:34.640,0:11:41.440
so you know or as opposed to having a picture 
of the mind map if somebody you know came into

0:11:41.440,0:11:49.760
the room and said okay roll up your sleeves we're 
going to do domain driven design right or if you

0:11:49.760,0:11:54.160
know you've never heard of DDD before done any of 
the practices okay we're going to use an aggregate

0:11:54.160,0:11:57.840
root and we're going to use value objects and 
we're going to use this and we can use that and

0:11:57.840,0:12:03.520
it's just like ah this it's so many terms and 
so many concepts and new things to understand

0:12:04.160,0:12:09.920
so one of the things that i do a lot when 
i'm working with clients who are learning

0:12:09.920,0:12:16.320
about domain-driven design instead of talking to 
them about aggregate roots like you know at the

0:12:16.320,0:12:23.040
beginning aggregate roots and value objects and 
and aggregates and bounded context and ubiquitous

0:12:23.040,0:12:28.080
language and all of these things which you know 
i understand this is the very first talk you're

0:12:28.080,0:12:34.160
hearing at this conference so you'll be hearing a 
lot about these things throughout the next couple

0:12:34.160,0:12:39.280
of days in the sessions and the workshops but 
what i do is instead of saying okay now we're

0:12:39.280,0:12:47.280
going to start using aggregate roots i don't 
tell them the term i show them right i show them

0:12:47.920,0:12:53.520
some code or maybe not even code we don't you know 
we don't really start with the idea of the code we

0:12:53.520,0:12:59.440
start with the idea of the business problem that 
we're trying to solve so i kind of map some of

0:12:59.440,0:13:06.080
that stuff out and we can talk about it and they 
understand it and then i let them know you know

0:13:06.080,0:13:12.640
by the way and i should say i don't happen to 
start with this particular example um but you

0:13:12.640,0:13:17.360
know whatever whichever concept from domain-driven 
design it is i'll start by showing it to them and

0:13:17.360,0:13:22.560
once they have an understanding of it then i 
tell them okay in domain-driven design this

0:13:22.560,0:13:28.320
has a particular name and it's important to 
understand those names those that terminology

0:13:30.320,0:13:35.200
so that you can have conversations with 
other people about what you're doing

0:13:35.200,0:13:41.840
and that parallels really interestingly to 
one of the concepts of domain-driven design

0:13:41.840,0:13:47.600
it's referred to as ubiquitous language don't 
worry too much about what that is you'll learn

0:13:47.600,0:13:53.520
more about it later um and you know that the term 
ubiquitous so it just means a language that's used

0:13:54.080,0:14:01.040
everywhere and uh domain driven design itself 
in its terminology has its own language so it

0:14:01.040,0:14:06.320
is important in domain-driven design we use that 
ubiquitous language so that we can communicate

0:14:06.320,0:14:12.000
with each other about the domain about the 
problems that we're solving so as we step back as

0:14:12.000,0:14:17.840
practitioners and we need to talk about what it is 
that we're what it is that we're doing in terms of

0:14:17.840,0:14:24.080
the architecture or the modeling it is important 
to use and understand those terms so that we can

0:14:24.080,0:14:31.440
all be on the same page and and have clarification 
on it i have been fortunate to be at a number of

0:14:31.440,0:14:38.640
conferences where michael feathers has spoken 
and at one of them he was talking about inside

0:14:38.640,0:14:46.000
out architecture and i thought about that um 
with respect to how i share domain driven design

0:14:46.000,0:14:51.600
with people and it seemed to resonate right um 
instead of starting you know it's the same idea

0:14:51.600,0:14:57.120
instead of starting with a language and with the 
terminologies and then showing what structure that

0:14:57.120,0:15:03.680
represents i go the other way around right i show 
the structure and then i introduce the language so

0:15:03.680,0:15:11.200
for me that that's how i see it as being inside 
out and also i know a lot of people like to use

0:15:11.200,0:15:17.120
the gardening analogy but it works really well 
and it works for me i like to garden but i'm not

0:15:17.840,0:15:24.400
a master gardener this is this is about where i am 
at these days although um even painting all those

0:15:24.400,0:15:31.120
tires so beautifully might be above my pay grade 
as they say but you know this is this is how you

0:15:31.120,0:15:39.120
can start right so this may not be master gardener 
level wonderful garden right but it's it's still

0:15:39.120,0:15:46.080
a thing of beauty and and it's achieving a lot 
by creating beauty even though it's not you know

0:15:46.800,0:15:50.960
amazing gardening like maybe all those plants 
are in their own little pots you buy them in a

0:15:50.960,0:15:55.760
pot and you just stick them in there i don't know 
but there's a beautiful little garden right so

0:15:56.560,0:16:01.600
with a little bit of knowledge about gardening 
you can still benefit and you can still achieve

0:16:01.600,0:16:09.200
something beautiful and you know maybe eventually 
someday depending on how much free time you have

0:16:10.000,0:16:15.200
um you'll get to this kind of a garden 
right but if you you know think about that

0:16:15.200,0:16:19.280
with all of the different things you need to 
understand and know about domain driven design

0:16:20.560,0:16:26.000
right you can start with a small amount and then 
you know if you're on a team there may be other

0:16:26.000,0:16:30.880
people who have more knowledge and you can work 
together and they can mentor you as you gain

0:16:30.880,0:16:38.720
more knowledge but you don't have to have that 
expertise going in so one of the most important

0:16:38.720,0:16:46.000
concepts within all of domain-driven design is 
the bounded context and it's interesting that in

0:16:46.000,0:16:52.800
recent years and so eric evans wrote the book on 
domain driven design and it was published in 2003.

0:16:52.800,0:17:00.400
so when i say in recent years maybe within 
the last 10 years he has said numerous times

0:17:00.400,0:17:05.840
that if he were to write the book over again he 
would start with a concept of bounded context

0:17:06.880,0:17:15.680
because it's really so critical to domain-driven 
design but it's also the most potentially

0:17:15.680,0:17:22.560
misunderstood concept in domain-driven 
design and i totally agree because i also

0:17:22.560,0:17:28.320
had some i had to take a path into it 
right i did not understand it right away

0:17:28.880,0:17:36.000
so the really high-level explanation of bounded 
context is when you're you're looking at your

0:17:36.000,0:17:40.480
whole domain and you know the whole big business 
problem that you're trying to solve and it's just

0:17:40.480,0:17:46.800
it's too many things going on all at once so what 
we do with the bounded context is we break it down

0:17:46.800,0:17:53.280
into smaller solvable parts so aligning that 
to cells right these are cells and each of

0:17:53.280,0:18:00.560
these cells is very bounded or constrained 
by the membranes these orange membranes that

0:18:00.560,0:18:06.880
surround them and those membranes prevent 
the bounded contexts for those cells

0:18:07.600,0:18:13.840
from communicating directly with each other 
from having to know about what's going on

0:18:14.560,0:18:20.720
in the other cells right and having having to 
have all of that complexity added to their own

0:18:20.720,0:18:27.120
problems right um and and also you know 
leaking information from one to another

0:18:27.680,0:18:33.280
so with the cells like with a bounded context you 
can just focus on one small part of the problem

0:18:33.280,0:18:39.120
and just don't worry about all the rest because 
like those membranes domain-driven design gives

0:18:39.120,0:18:45.520
us wonderful ways that people have a lot of 
experience with of communicating between those

0:18:45.520,0:18:52.800
cells giving you know taking information from one 
cell and sharing it with another cell so we those

0:18:52.800,0:18:59.040
patterns all exist so you can actually say let me 
just focus on this one problem right i'm not going

0:18:59.040,0:19:07.680
to worry about those other problems and suddenly 
life does become simpler i i promise you i i even

0:19:07.680,0:19:16.160
apply the idea of bound you know these boundaries 
uh you know after dinner and there's dishes and

0:19:16.160,0:19:21.040
food to put away and this problem going on in that 
and just like okay i'm just going to focus on one

0:19:21.840,0:19:25.520
and oh okay i can handle washing the 
dishes right put them in the dryer rack

0:19:26.320,0:19:30.400
right okay now i'll go well maybe i should put 
the food away first okay so i'll take that problem

0:19:30.400,0:19:38.160
first right but there's there's so much value to 
this concept of just breaking a big problem that

0:19:38.160,0:19:43.920
is maybe overwhelming down into small problems 
and then each of the small problems you can solve

0:19:43.920,0:19:50.000
right and much less stressful and then and then 
worry about the interactions of them because we

0:19:50.000,0:19:56.320
have all those patterns so you don't have to worry 
about that so i've kind of driven towards this

0:19:57.600,0:20:05.360
in this explanation of my path to domain driven 
design before i truly understood bounded context

0:20:05.360,0:20:11.520
i definitely grasped the idea of boundaries 
and benefited from boundaries greatly

0:20:12.480,0:20:19.280
before i was knowledgeable enough to really 
understand that context and implement

0:20:19.280,0:20:29.120
bounded context and all that evolves around 
that um i'll take myself as an example so i

0:20:29.120,0:20:34.320
i know a lot of you are net developers and you 
know so you knew know about entity framework

0:20:34.320,0:20:39.120
um in the early days of the entity framework 
the way it worked was that you pointed it to a

0:20:39.120,0:20:44.640
database the database might have you know legacy 
database might have you know 700 tables and

0:20:44.640,0:20:49.360
25 000 relationships and you point it there 
and create one big huge model from that

0:20:49.360,0:20:54.480
and i would just look at that and say this 
this just can't be right it's so complex

0:20:54.480,0:21:02.000
right so with the idea of boundaries uh that you 
know one of the early things i understood from

0:21:02.000,0:21:08.400
domain-driven design i was able to look at these 
uh entity domain models and say oh wait a minute

0:21:08.400,0:21:14.320
you know i i don't need to look at all of it at 
once let me just create a small model that's just

0:21:14.320,0:21:18.480
you know these things because this these things 
all relate to each other and they're transactional

0:21:18.480,0:21:25.440
and i can just focus on that and then you know 
slowly i'm pulling apart this huge model and have

0:21:26.080,0:21:30.720
maybe i have a lot of a lot more things 
i'm dealing with but each of those things

0:21:30.720,0:21:36.800
is so much simpler that it's overall a 
huge benefit to to have broken it down

0:21:37.440,0:21:45.040
um and you know i do like to think of myself as a 
canary in the coal mine i don't know if you know

0:21:45.040,0:21:53.120
this analogy um in in coal mines the air isn't 
very good down there and poor little canaries they

0:21:53.120,0:21:57.680
would take these little canaries down into the 
coal mine and if the canary could still breathe

0:21:57.680,0:22:01.920
then it was you know good chance that the 
coal miner would be safe but if the canary

0:22:03.680,0:22:11.920
died sorry um then they knew it was it was 
terrible really um anyway now i'm really

0:22:11.920,0:22:19.760
sad about the canary so we'll just go to um so i i 
feel like that with a lot of technology right uh i

0:22:19.760,0:22:25.920
feel like if i can learn it you can learn it right 
entity framework i figured it out here i'll show

0:22:25.920,0:22:32.560
you how to use it um and you know i had my path 
to domain driven design it was not the same as

0:22:33.280,0:22:37.360
you know it wasn't i read the whole book and then 
i was like oh okay i understand it all now i'm

0:22:37.360,0:22:44.160
gonna do it it was little by little by little so i 
actually want to share with you what that path was

0:22:44.800,0:22:52.320
so i understood the concept of domain right like 
the the big the business the the business problem

0:22:52.320,0:22:56.400
you're working on or maybe part of that 
business problem that you're trying to

0:22:56.400,0:23:02.640
solve so i understood that that i was focused on 
and then i understood the concept of boundaries

0:23:03.200,0:23:06.640
right and interestingly domain driven 
design when you read different books

0:23:07.440,0:23:12.080
or courses etc they don't really focus on 
boundaries they go right into bounded context

0:23:12.880,0:23:18.720
and you know so i looked about a context but 
i didn't really get all of it but i understood

0:23:18.720,0:23:24.240
that concept of boundaries and you'll see it 
wasn't an immediate next step to bounded context

0:23:24.960,0:23:31.760
from there i i started really understanding this 
idea of each uh each of the bounded contexts even

0:23:31.760,0:23:41.360
though to me it was just something with a boundary 
could use should use separate databases and that

0:23:41.360,0:23:46.400
you know that also sounds like like oh that's 
crazy why would you do that but you know we hear a

0:23:46.400,0:23:52.640
lot more about that with microservices as well and 
uh you know the capability i think uh coming from

0:23:53.200,0:23:57.680
somebody who's been programming for 30 years 
the idea of oh multiple databases you know

0:23:57.680,0:24:02.400
sql server and thinking how expensive it is and 
everything like things are very very different now

0:24:02.400,0:24:12.400
um but understanding why like not trying to put 
you know share everything all in one place how um

0:24:12.960,0:24:19.280
how much simpler things get and these 
problems just start sorting themselves out

0:24:19.280,0:24:24.960
by you know this this deep separation concerns by 
saying you know we're going to have our this data

0:24:24.960,0:24:30.720
stored here and this data stored here not try to 
make it related and not try to normalize it and

0:24:30.720,0:24:36.800
not try to share it for you know have data that 
has lots of different meanings right so um within

0:24:36.800,0:24:42.720
these boundaries things have specific meanings and 
with those meanings will store them in their own

0:24:42.720,0:24:50.240
database and again trusting that you know our our 
technology provides uh not only our technology but

0:24:50.880,0:24:56.800
ideas from domain driven design give us 
all kinds of ways to share that data so that

0:24:57.520,0:25:02.560
didn't seem to i finally realized it took a 
while to realize it wasn't as big a deal as

0:25:02.560,0:25:09.280
i originally thought then um and again i'm not 
here to teach you all of these different things

0:25:09.280,0:25:15.200
because you've got two full days of sessions and 
workshops but you'll hear these things so the next

0:25:15.200,0:25:20.880
thing that i really understood in domain driven 
design i started really understanding the idea

0:25:20.880,0:25:28.240
of the aggregate root so like the um in an um in 
a graph of objects the objects that's responsible

0:25:28.240,0:25:36.320
for all the business logic and the rules of that 
transactional unit from there i finally started

0:25:36.320,0:25:44.080
understanding value objects and this is where i 
always have to stop and say value objects were

0:25:44.080,0:25:50.240
the hardest thing for me to get my head 
around the further away i get from that

0:25:51.040,0:25:57.360
the harder it might be for me to understand how 
hard it was but i will never forget how hard it

0:25:57.360,0:26:06.400
was and that i learned i think it was like five 
completely different examples from books from

0:26:06.400,0:26:12.640
conference talks from conversations that i had 
with different people or from different people

0:26:13.200,0:26:18.560
um completely different perspective on 
describing what a value object was right and

0:26:18.560,0:26:23.600
you know i got the first one and i didn't quite 
get it and the second one i didn't quite get it

0:26:23.600,0:26:31.440
it wasn't until that fifth one and i'll tell you i 
was at i remember Microsoft's TechED conferences

0:26:31.440,0:26:36.240
i was at a TechED conference i was speaking 
but jimmy nielsen was also speaking and he gave

0:26:36.800,0:26:43.120
an example of value objects that had something 
to do with eggs and an egg curtain and i can't

0:26:43.120,0:26:49.680
remember exactly what it was i should go back and 
find a video of that but there was something about

0:26:49.680,0:26:56.160
his explanation now it wasn't his explanation that 
was oh finally the perfect explanation but it but

0:26:56.160,0:27:03.120
i had the ability to take what he was saying and 
put it together with all the other descriptions

0:27:03.120,0:27:12.160
that i've heard and then putting them all together 
i finally finally went oh i get it okay i get it

0:27:12.160,0:27:19.840
right so the reason i'm telling you that is here i 
am giving a keynote talk at a DDD conference right

0:27:20.480,0:27:27.600
i want you to understand it doesn't just come 
to me like that it's just just because i'm here

0:27:27.600,0:27:32.480
giving a conference talk and a keynote doesn't 
mean that you know oh i'm one of those people

0:27:32.480,0:27:39.760
where everything's really easy i'm persistent 
so you know i kept at it um and you know it's

0:27:39.760,0:27:45.920
just i just want you to know that so you know 
if you don't get it right away don't stress out

0:27:45.920,0:27:51.200
about it don't beat yourself up about it right 
it's just it's normal and it's you know it's

0:27:51.200,0:27:59.680
just a matter of uh hearing an explanation that is 
designed in the same pattern that your brain works

0:27:59.680,0:28:05.120
right and that was me i had to take all these 
others together um now when i teach domain driven

0:28:05.120,0:28:09.840
design especially you know the beginning getting 
started i have a pluralsight course on it that i

0:28:09.840,0:28:18.320
did with my friend steve smith um i i tried to 
take the way that now i understand it to try to

0:28:18.320,0:28:24.320
see if that is a more helpful way for people to 
first understand it anyway so value objects um

0:28:25.120,0:28:30.080
i just you know like any of the other pieces 
here don't stress that by the time i heard that

0:28:30.080,0:28:35.600
fifth explanation i already had all this other 
stuff kind of under my belt like i got it and

0:28:35.600,0:28:40.480
understanding those things helped me finally 
get to my aggregate root and i've mentioned

0:28:40.480,0:28:46.880
this before ubiquitous language this was something 
that um i think i had a hard time with it mostly

0:28:47.680,0:28:53.840
because i saw the term too much too many 
times before i understood it and every you

0:28:53.840,0:28:59.440
know and i started getting like those those uh 
developers at that client like i don't want to

0:28:59.440,0:29:03.360
hear about ubiquitous language anymore i don't 
understand it and you just keep saying that word

0:29:04.560,0:29:08.960
what is uh uh the princess bride you keep saying 
that word but i don't think you really know what

0:29:08.960,0:29:12.480
it means well the people who are saying it did 
know what it means it's just you keep saying

0:29:12.480,0:29:20.560
it i don't understand um now i understand right 
and and again it was just part of part of my path

0:29:21.840,0:29:28.880
putting together all of these things bounded 
context finely gelled and bounded context

0:29:28.880,0:29:33.920
is actually very tightly tied to ubiquitous 
language interesting and it's important to have

0:29:33.920,0:29:41.040
that language so that when you're talking about a 
particular problem or problem set everybody's on

0:29:41.040,0:29:47.280
the same page and you all know what you're talking 
about because oh we're in the context of um uh

0:29:48.880,0:29:55.440
selling boots right so you know when we 
talk about hill right these are these are

0:29:55.440,0:29:59.600
things in our business right that's a that's 
something within our business or we talk about

0:29:59.600,0:30:05.520
you know certain aspects of manufacturing boots we 
we know that those specific to manufacturing boots

0:30:05.520,0:30:08.960
some of those words the things that 
you do when you're manufacturing boots

0:30:08.960,0:30:13.360
you might have the same word when you're 
manufacturing computers but it means something

0:30:13.360,0:30:18.560
totally different because it's a whole different 
set of problems and the reason i'm harping on

0:30:18.560,0:30:24.400
this a little bit right now is because i real 
i've learned that there's a lot of people who

0:30:24.400,0:30:29.760
when they first learned about ubiquitous language 
they thought it meant throughout the entire domain

0:30:30.320,0:30:35.440
across every single bounded context so i just want 
to leave you with that right that that's it's per

0:30:35.440,0:30:42.080
bound of context so all of these things helped 
me understand better and better a bounded context

0:30:42.080,0:30:49.440
um and then anti-corruption layers are just one 
of the patterns that we have for communicating

0:30:49.440,0:30:55.840
uh data that needs to go maybe from one bounded
context to another messages or events that need to

0:30:55.840,0:31:02.080
to go um and i have that one in there specifically 
because again you know i i had this kind of brain

0:31:02.080,0:31:09.360
freeze on anti-corruption layers interestingly 
not on what they were for but the actual name i

0:31:09.360,0:31:16.880
always would stop and go ACL right i remember ACL
and then i would say ACL anti-corruption layers

0:31:16.880,0:31:23.360
whenever i'm like trying to talk about them so 
all of these things little by little over time

0:31:23.920,0:31:28.320
you know with the support of other people 
that i'm working with enabled me to finally

0:31:28.320,0:31:35.200
grasp that full mind map of domain-driven design 
all right but along the way you know understanding

0:31:35.200,0:31:41.360
boundaries before i understood bounded context 
already benefited me a great deal um you know

0:31:41.360,0:31:48.560
and and throughout so i wanted to talk a little 
bit about um when i go in to work with a client

0:31:49.280,0:31:54.480
and usually they're refactoring they're dealing 
with some legacy code and i just wanted to give

0:31:54.480,0:32:02.560
you an idea of what it is that i'm doing and 
how i approach that so uh from for for you

0:32:03.440,0:32:08.480
what this could mean is you know if you're on 
a team and you're dealing with legacy software

0:32:09.200,0:32:16.000
and uh you know bringing the ideas and the 
guidance from domain driven design into the mix

0:32:16.640,0:32:21.120
so usually these clients are dealing with 
legacy software and what this might mean for you

0:32:21.120,0:32:28.320
is you know if you're in that situation and you're 
trying to help your team or help others use domain

0:32:28.320,0:32:35.200
driven design ideas to begin looking at the 
software and how you might start refactoring it

0:32:36.480,0:32:43.040
this is this is somehow sometimes my approach 
so one of the things i'll do is work on

0:32:43.040,0:32:48.240
you know and and look for these ideas as you go 
through the next couple of days i'll i'll work on

0:32:49.200,0:32:57.200
a you know a transactional bundle of objects 
that go together for example if you're doing

0:32:57.200,0:33:06.240
sales um an order with its line items right and 
an order we have certain rules about that order

0:33:06.240,0:33:11.760
so what i do we do is we'll look at just 
that right that group of objects that travel

0:33:12.400,0:33:19.280
uh through your application together and 
look to see if we can find boundaries

0:33:19.280,0:33:25.440
right like for example you might say well 
it's a customer with an order with line

0:33:25.440,0:33:30.000
items and products right and now we've got 
all the problems of maintaining the customer

0:33:31.280,0:33:38.080
suddenly involved in this problem and you know 
so start i start looking for boundaries and and

0:33:38.080,0:33:44.080
exploring that and we just do this on a whiteboard 
and you might keep turning it on its head right

0:33:44.080,0:33:50.480
like just different perspectives but i don't talk 
about aggregate roots right i don't talk about

0:33:51.840,0:33:56.640
value objects and you know bounded context i 
just say let's look at you know your domain

0:33:56.640,0:34:00.560
and let's look at the problems you're trying to 
solve and you know let's just try to get some

0:34:00.560,0:34:06.800
new perspective on them along the way then i'll 
say oh by the way we refer you know when we're

0:34:06.800,0:34:11.520
talking using domain-driven design ideas we 
refer to this as an aggregate root or we refer

0:34:11.520,0:34:16.080
to this as an aggregate or we refer to this 
as a value object or an entity or whatever

0:34:16.880,0:34:23.520
then you know and then we just dig in and do 
a little more work go a little more deeply

0:34:23.520,0:34:29.040
right and again just whiteboarding without terms 
right and then say oh by the way the thing that

0:34:29.680,0:34:35.200
we just did this is you know in DDD it's called 
this and this and that so i intro slowly introduce

0:34:35.200,0:34:42.400
the terms um as they get uh more accustomed to the 
concepts so we just go back and forth like that

0:34:44.320,0:34:49.360
and eventually you know their garden this 
is more my style garden a little more of

0:34:49.360,0:34:54.720
like i think it's called an english garden 
a little a little more wild but you know and

0:34:55.360,0:35:03.840
it grows your your understanding of domain driven 
design grows and the um your ability to apply

0:35:03.840,0:35:07.680
these ideas to the software you're 
building and gain the benefits

0:35:08.400,0:35:13.520
that domain driver design gives us which you know 
in my mind is to make my life simpler right to

0:35:13.520,0:35:20.720
de-stress the subtitle of eric evans book is 
tackling complexity right tackling complexity

0:35:20.720,0:35:27.120
so we take this like this might look complex 
right but it started from something small

0:35:28.560,0:35:37.440
um and you know another thing i want to point 
out um some it's not that it's a criticism of

0:35:37.440,0:35:45.600
this idea of learning domain-driven design little 
by little and i've heard other like DDD gurus

0:35:45.600,0:35:52.080
um talk about you know do is is this approach is 
it really domain driven design or is it something

0:35:52.080,0:35:56.720
like domain driven design light but when they 
say that right i think well that sounds kind of

0:35:56.720,0:36:03.440
negative like it's just a lightweight version 
maybe maybe they even say l-i-t-e which you

0:36:03.440,0:36:09.360
know l-i-g-h-t that's a wonderful thing right it's 
shining light on things but what they're saying is

0:36:09.360,0:36:15.840
you know like a a lightweight version of DDD right 
which is not a terrible thing right in in a lot of

0:36:15.840,0:36:22.480
people's minds but i prefer to think of it as DDD 
core right the the core elements of domain-driven

0:36:22.480,0:36:28.000
design like you know really like you know learn 
that bounded context learn how to how to identify

0:36:28.000,0:36:36.720
boundaries then you know and then dig in deeper um 
i so i i do prefer referring to it as as DDD core

0:36:37.920,0:36:43.760
and then a few last things that i want to leave 
you with um that you know i think is really

0:36:43.760,0:36:49.520
important to share when when you're talking about 
domain driven design first of all again as you'll

0:36:49.520,0:36:55.680
learn throughout the next couple of days DDD 
is really made up of two really important areas

0:36:55.680,0:37:00.080
one is strategic design where you do all this 
planning right where you figure out where these

0:37:00.800,0:37:06.160
where those boundaries lie and then figure out 
how things relate to each other within those

0:37:06.160,0:37:13.680
boundaries and then figure out you know how you're 
going to enable communication of messages or data

0:37:13.680,0:37:19.280
between those boundaries so within strategic 
design you know that one of the most important

0:37:19.280,0:37:24.400
things is about client collaboration 
which doesn't end with strategic design

0:37:25.440,0:37:30.320
and you know focusing on you know when you are 
looking at the big big problem of your domain

0:37:30.320,0:37:35.680
and you divide it up into smaller problem 
sets really you know identifying what is the

0:37:35.680,0:37:41.680
most important piece that drives your business 
right what's unique about your business that

0:37:41.680,0:37:46.880
uh really makes money right that that like what 
is the most important thing and really focusing

0:37:46.880,0:37:52.560
on that um you know and then for me reducing 
the complexity which also reduces stress

0:37:53.840,0:37:58.960
discovering those bounded contexts and boundaries 
and discovering that ubiquitous language within

0:37:58.960,0:38:05.600
those bounded contexts then the other big piece 
of it is once you've done all that strategizing

0:38:05.600,0:38:10.800
it's really time to start thinking about how 
you're going to put the code together right

0:38:10.800,0:38:17.360
how you're going to implement these bound these 
domains these bounded contexts that you've defined

0:38:17.360,0:38:25.040
during the strategic design and you know it does 
it can really lead you to writing better code um

0:38:25.600,0:38:33.600
val you know value objects really are a beautiful 
thing and uh the same client that i went to where

0:38:33.600,0:38:39.120
everybody like was saying i don't want to hear 
any more about domain-driven design the end of the

0:38:39.120,0:38:46.320
last day one of the developers and this is a very 
very intelligent guy came up to me and said you

0:38:46.320,0:38:53.200
know i never really thought about value objects 
before and now i realize how beautiful they are

0:38:53.200,0:39:01.920
and how important they are and now i'm so excited 
about learning more about what DDD gives me right

0:39:01.920,0:39:08.080
enables me to build better software like i almost 
you know some people would be like mike dropped me

0:39:08.080,0:39:15.440
i was like almost crying when he said that um 
and you know there are really interesting things

0:39:15.440,0:39:22.480
to learn about how we define relationships 
between our entities in domain-driven design

0:39:23.360,0:39:29.440
aggregate root is you know all of these things as 
i learn them and as i see other people learning

0:39:29.440,0:39:36.000
them on the aggregate roots and and the this 
importance uh one of the things that DDD really um

0:39:36.640,0:39:44.640
helps is to eliminate like side effects like 
unexpected unanticipated side effects right

0:39:44.640,0:39:49.760
because you don't have things that are just 
connected all over the place right things are

0:39:49.760,0:39:57.200
really bound right so these these are the things 
that you define as your these are the benefits

0:39:57.200,0:40:03.040
that we gain as we're working inside the bounded 
context and doing the implementation the tactical

0:40:03.040,0:40:10.320
design so things that you can look forward to as 
you're learning more about domain-driven design so

0:40:10.320,0:40:18.800
i hope this uh talking about these things will 
help you as you move through the the talks and

0:40:18.800,0:40:24.160
the workshops of the next couple of days you're 
going to be inundated with all kinds of really

0:40:24.160,0:40:30.960
amazing ideas and it may feel overwhelming 
but don't don't stress out about them right

0:40:30.960,0:40:36.800
you can just kind of take it all in and it'll be 
back there when you're ready for it but you know

0:40:37.360,0:40:41.760
find the things that really make the most sense 
to you and those are where you can start with

0:40:42.320,0:40:48.400
so have a wonderful conference um and i 
look forward to chatting with you in the

0:40:48.400,0:40:53.920
virtual community room it looks like so much fun 
i've had a little tour of it thank you so much

0:40:59.040,0:41:06.080
okay thanks ev thanks julie for his for 
her excellent speech and let's give her

0:41:06.080,0:41:09.040
a round of applause silently 
in front of your computer

0:41:10.960,0:41:20.720
okay thanks julie okay silently yeah okay so i i 
love julie's speech very much her speech very much

0:41:20.720,0:41:28.320
especially when the idea of don't tell just do and 
find some boundaries first and forget about all

0:41:28.320,0:41:35.600
those dragons and get rules value objects first and 
focus on the domain okay the next part will be our

0:41:36.160,0:41:44.800
uh we'll turn to slido and we have 10 more minutes 
for our QA sessions let me share my screen okay

0:41:45.360,0:41:52.160
so if you haven't haven't post your 
question on the on the slido you have

0:41:52.160,0:42:00.320
some minutes to do it and you can uppost
your favorite questions okay so okay

0:42:05.120,0:42:08.800
so julie so the first question is

0:42:08.800,0:42:14.560
could you explain could you explain more on the 
difference between sub domain and bonding context

0:42:21.840,0:42:31.680
yeah that's actually a great question uh 
because um sometimes a sub when you identify

0:42:31.680,0:42:41.840
the sub domain that has the same boundaries as the 
bounded context so so quite often they look like

0:42:41.840,0:42:49.840
just the same piece of your domain but there are 
times and that's probably the most normal where

0:42:50.400,0:42:59.280
once you've ident identified the sub-domain and 
then so i'm just going to back up a little bit

0:42:59.280,0:43:05.360
so subdom the the sub domains are the things 
are what you look for first you don't start

0:43:05.360,0:43:10.720
by looking for bounded context you look to 
identify the different sub domains and then

0:43:10.720,0:43:17.680
you start talking about the subdomains this is 
when the ubiquitous language starts evolving

0:43:19.040,0:43:24.240
and it's from that ubiquitous language 
that you start defining the bounded context

0:43:24.800,0:43:36.560
so quite often the uh perimeter right that 
that which is the subdomain aligns perfectly

0:43:36.560,0:43:42.560
with a bounded context but sometimes you 
might want you might find that you need to

0:43:43.440,0:43:51.600
implement that subdomain as two different 
bounded contexts for one reason or another um and

0:43:51.600,0:43:59.600
interestingly the i've got a a pluralsight course 
on called uh domain driven design fundamentals

0:43:59.600,0:44:07.760
that i did with steve smith and when we first did 
the course we interviewed on video on camera we

0:44:07.760,0:44:16.080
interviewed eric evans and um this was one of the 
questions we asked him and he also his his answer

0:44:16.080,0:44:24.160
was more uh deeper than what i've just said um but 
if you do happen to watch that course you can also

0:44:24.160,0:44:35.280
see eric um with the with the way that he helps 
explain how sometimes it's the same and sometimes

0:44:35.280,0:44:42.800
it's different so a little hard to deeply answer 
that right now but i hope that helps a little bit

0:44:46.320,0:44:53.120
okay thanks julie oh that's a well explanation if 
you have more interested please check the videos

0:44:53.120,0:44:59.120
with the interview with eric evans 
yeah yeah pluralsight is free this week

0:45:00.320,0:45:07.040
through um through the seven it's been 
all week and through sunday the 17th

0:45:07.040,0:45:11.280
it's free so if you don't even have a pluralsight 
subscription you can still go watch it

0:45:12.160,0:45:15.920
whoa that's big surprise thanks 
thanks for sharing that oh

0:45:16~0:45:28.880
Our company has a big mud ball 

0:45:28.880,0:45:35.600
system with a history of more than 20 years how 
can we replace that system through DDD in stages

0:45:35.600,0:45:50.560
interactively please yeah um that this is uh a 
very common conversation a very common question

0:45:50.560,0:45:57.440
because uh most often people are dealing with 
legacy applications right not everybody gets

0:45:57.440,0:46:04.960
to start with a brand new idea and and build 
it up from scratch and you you know nobody can

0:46:04.960,0:46:10.320
just say okay we're just going to replace the 
whole thing all at once right it's it's hard

0:46:10.320,0:46:18.480
it's like impossible to do there are actually 
quite a few patterns for for doing that um and

0:46:19.120,0:46:23.920
people talk about that a lot when they talk 
about microservices when they talk about

0:46:23.920,0:46:31.440
evolving their system into microservices but 
you know you need a plan there's no question

0:46:31.440,0:46:40.560
about that and absolutely it's something that you 
know uh you would need to do iteratively um but

0:46:41.280,0:46:48.800
first you know it you need to just kind of step 
back i think the most important first step is

0:46:49.760,0:46:56.800
to look at the business almost like it's brand 
new like try to understand it from a very new

0:46:56.800,0:47:03.440
perspective because the one thing you don't 
want to do is just rewrite the same logic

0:47:04.320,0:47:10.800
that was how you thought about it 20 years ago and 
then just write it you know in new code right it's

0:47:10.800,0:47:20.160
your the best opportunity to really step back and 
re-consider how data would you know how the data

0:47:20.160,0:47:26.000
is moving around how um you know what the problems 
are what are the most important problems to

0:47:26.000,0:47:34.240
to focus on um one other thing i want to 
say about that is when i'm helping people

0:47:34.800,0:47:42.240
learn these techniques um what we do is we 
look for that low hanging fruit if you know

0:47:42.240,0:47:48.080
that phrase like the eat kind of the easiest thing 
but that's not for the implementation that's just

0:47:48.080,0:47:53.280
for learning like we do the easy thing 
because it's something easy to learn with

0:47:53.280,0:48:03.280
but um doing that strategic design can also help 
you identify what the you know what your path is

0:48:03.280,0:48:08.960
through the changes what's what's the most you 
know what is the most effective thing you can

0:48:09.840,0:48:20.160
create the most quickly or um you know as you're 
learning so uh that that's a huge question so

0:48:20.160,0:48:28.880
hopefully that's a little bit of an idea of where 
to begin yeah thanks julie that's very very useful

0:48:51.440,0:48:57.520
do you have an experience to work with a group 
of people that is not applying DDD on server side

0:48:57.520,0:49:05.440
like mobile or desktop can you share something 
about that sure um personally i haven't been

0:49:05.440,0:49:12.640
involved in that however um i've had a lot of 
conversations with people who have been doing

0:49:12.640,0:49:21.120
it there are even a few people who uh speakers and 
and people who are writing and training that focus

0:49:21.120,0:49:27.600
on and it's kind of unusual focus on domain 
driven design at for the front end which is

0:49:27.600,0:49:33.760
really interesting you know applying the ideas 
but one of the most interesting stories that was

0:49:33.760,0:49:42.720
shared with me was with somebody um who again with 
a they had a legacy app and the back end of that

0:49:42.720,0:49:48.240
app worked perfectly and they didn't want 
to muck with it but they needed to have

0:49:48.880,0:49:54.800
a a modern front end they needed to modernize 
the front end for their users because

0:49:54.800,0:50:02.560
it was just so old-fashioned and they wanted 
something new so what they ended up doing was um

0:50:04.640,0:50:12.880
because they wanted to leave like their old DB2
database intact and their old cobol code intact

0:50:13.760,0:50:20.320
they built they found a cobol developer to 
write an api in front of the cobol logic

0:50:21.200,0:50:28.640
and so their new user interface just talked to the 
api and then the api just let the cobol logic do

0:50:28.640,0:50:34.320
everything that it's always been able to do 
and they did something similar in front of

0:50:34.320,0:50:40.640
the database they put an ORM uh not entity
i don't think it was a entity framework but an

0:50:40.640,0:50:48.720
ORM in front of DB2 that allowed them to query 
out of the database without having to know how to

0:50:48.720,0:50:55.760
interact with DB2 and they were then able to 
apply uh and use really modern not just modern

0:50:55.760,0:51:02.880
tools but modern software practices with the new 
stuff so it was really really interesting and i

0:51:02.880,0:51:08.400
really think of that as domain driven design 
thinking to have come up with that solution

0:51:10.320,0:51:16.400
okay thanks that's very insightful and 
knowledgeable okay so it's 9 50 here so

0:51:16.400,0:51:25.040
our first speech ends here and let's give julie 
a very big big thanks okay thanks julie nice to

0:51:25.040,0:51:34.240
meet you hope we can see you next year or in a few 
years yes thank you so much for inviting me it was

0:51:34.240,0:51:41.760
it really was a pleasure yeah we are also 
honored to have you here so thank you bye-bye