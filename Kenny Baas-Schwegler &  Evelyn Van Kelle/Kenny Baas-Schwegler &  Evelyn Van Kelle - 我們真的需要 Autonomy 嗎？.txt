i want to say something

to welcome kenny best regular and he'll be elvin benkel

thank you yes so unfortunately evelyn couldn't be here today and while i'm start talking i'll start to share my screen so yes evelyn is struck ill this morning so unfortunately she cannot come so uh all the best uh to her and um let me get the chat up as well so if you have questions or comments during during this talk you can i'll see the chat and maybe i can react to it so today will be a talk about autonomy is that what we really want and i'm really humbled to be back at ddd taiwan for the second year and i really like it unfortunately not in taiwan my wife would have really loved it she is addicted to bubble tea she really wants to go there one day so hopefully next year we'll go there so talking about that let me share a personal story first so me and my wife recently moved houses it was around in the neighborhood and yeah we move our main goal is to live close by her parents also my parents live close for us it's important to have family close to us and the added benefit is since my mother-in-law comes from asia she gives us a lot of food which is also important to us but we moved houses recently and this earlier this year and if you look at autonomy you would think well i have a house now i can do whatever i want on that house which unfortunately is not the case if you look at my garden here in the back right and there's a carport you would say well let's just add more garden to the carport and i have a bigger garden well unfortunately this neighborhood got designed 10 years ago there was an architect along with the with the authorities here and they say in the contract that this part this carport needs to be able to hold one car why because if everyone would do do this in the neighborhood there won't be enough car spaces left so you know if you talk about autonomy are we now really autonomy with our own house no so if we would have moved to well a more rural area in the netherlands then of course maybe we'll have more autonomy but in this case um is autonomy what we really want because in this case for us it's close to live close to our family now and of course i have cats so are we truly always autonomous well we have a cat door here right so we need to abide by our cats because well eventually they're they're in control usually so but to describe and move on with autonomy we need to well define it a bit so autonomy as described by mr pink as the urge to direct one's own life without the ability to control what when and how we work and how and who we work with will never be completely motivated to complete the task so that's autonomy right and within the domain driven design scene autonomy is when you look at the batman context pattern right autonomy is a big thing but we're lacking mastery and purpose there and we're so focused on that autonomy so mr pink in his book drive describes autonomy as direct one's own life now are we could we actually ever be completely autonomous and completely control and have the ability to control what when and how we work now if we will ask if philosophers and if romeo would watch this he would agree then we're born free but the first thing is our parents right our parents control us and we follow the instruction retaining only in some cases but this is a big philosophical question that we're not going into today because that will take weeks maybe months maybe years maybe never to solve so autonomy in here is uh well there's an illusion of now if you look at the definition it's the quality of state of being self-government especially the right of self-government the territory was granted autonomy so if you look at the dictionary autonomous sound like self-directing freeman and especially moral independence personal autonomy now if you look at my house where i live do i have the autonomy to do that no i haven't because i'm part of a village here so i'm not autonomous right and and that's the thing with autonomy if we look at software development and here you have uh jape and mark saying i hate the word autonomy right it's individuating i have no right to make my own decisions that's what we hear i have the right to make my own rules when we look at domain driven design and software developer is that truly what we really want that autonomy of course we want some self-organization self-government but we truly want autonomy because in this case in my opinion autonomy can be compulsive right a goal on its own instead of a means to an end but autonomy in isolation is not enough it's part of a bigger context like my home i'm living in now right it's part of a bitter context i have neighbors i have i have people living in this village so i cannot really do what i want and the same goes for software development right in software development i'm building software with my team preferably and of course i cannot do what i want and that's the polarity here that we're going to talk about the polarity is between isolation and connectedness right us uh me versus we and autonomy is on that skill and every time we need to decide and balance these two things right so autonomy is that bulk concept that we use as we please but the concept needs granularity it means different things on different levels well we're doing ddd workshop and we face the importance of language and meaning all the time right so we want to be exact on the word that we use what does it mean and it's no different for autonomy when we're going to use it autonomy defines boundary on multiple level and that's why we're here today we want to dig into this concept see what it means on different levels tell stories about what we've seen in organization and teams and how autonomy can be misused misinterpreted and be a risk for the record we're not saying autonomy is bad it might come across that way now but that's not the case autonomy is brilliant when we all know within our relevant power what it means and applies so we will share some learnings and observation while we evelyn's not here so i'll take over for her and that we think we might help you in defining these powers more effectively so where do we actually need autonomy lots of teams and people state that we want to be self-organizing and or self-steering both marked as autonomous but there's a difference here you can be self-organizing i can self-organize my house but it still requires steering right the government here scares me it happens all the time teams asking for vision from leadership please don't interfere with how do we do things here but let us know what the end goal is where you want to go with this company so the first question is where do we need and we want autonomy and how much do we want it right what's the skill uh and that comes into defining boundaries well we're in a domain design conference and boundaries are like one of the core concepts in the window and these boundaries are hard to define when we stick with the bulk concept of autonomy that's why we dive into different levels with pitfalls and opportunities but first let's visualize this polarity between connectedness and of course the other one which is the part and the whole right so this is what we're going to talk about autonomy is part of the skill between that part and a whole in system thinking you have it right part and a whole and what connects me with these things and this is a lemnis cut right it's a it has both upsides and downsides between the two yeah so if you look at the part the part is the eye it's the more autonomy way right you have uniqueness but you always also have isolation now if you look at the whole like being part of a whole being part of a team you have connectedness but the danger there is also sameness right there's no uniqueness anymore in it and this is what we need to manage this is what we're gonna go into now first thing um also we we talk a lot about polarities with hin it's a friend of ours and she has this nice fun fact internet so so the lemny scott you just saw in the middle right comes from the latin word lemny scotus what does it mean so i give you 10 seconds is it round corners decorated with hanging records or the devil's curse so use the chat and i will see maybe someone has an answer so let's see so it's a ground corners decorated with hanging arguments or the devil curse so anyone has an id i don't see anything in the chat so i'll just say it's decorated with hanging rhythms some people say it might be the developed skirt spotted songs so let's continue with the talk so today we're gonna talk or i'm gonna talk about four levels of autonomy yeah so the first level is autonomy and code i'm going to clearly go inside code because there's this lenny scott as well and then we go to teams then we go between teams and then we go into organization and if you look at domain-driven design this is the full area domain-driven design and tilts right it's the whole thing we do for software so let's go to autonomy and code and there's no silver bullets and golden hammers that's what i would like to start with right there's no one way of doing things because it's that balance that tight balance that we need so when i started coding i came into a team and well proper unit testing was a thing we needed to do proper unit testing but back then i saw this unit test as well i have a java class in this in in this case and then i create one unit test for that class right it's always one on one one class one unit test and what happened is that at some point i find myself creating a lot of mocking stubbing faking in all these unit tests and that's only one strategy we picked right one on one an isolated strategy so we isolated these all there but there was no connectness between the classes and the classes should actually represent units where there's a form of autonomy and isolation so martin fowler recently put out this blog post right about test shapes and there you see it in in in the book by j fields working effectively with unit tests you see you have two types of tests you have the social tests which are often the tested unit relies on other unit systems behavior right but i'm not stubbing it away i'm using it as a whole unit a unit of work a unit test so i'm using everything and i'm not using any monks now the other one here is the solitary test that's the strategy i used at the start right i have one unit one class i stop and prefer to isolate that tested unit and you see i mocked it away and both of these has side effects right think about the connectedness and isolation again and we need to manage that there's no one approach here that you can take take the approach that solves the purpose and a good friend of mine thomas pierrot he he says and the goal here is to look at the outside in and have proper acceptance test coarse-grained connected unit tests right which is in the middle and we might go find grades in the unit test which are more solitary tests right but first of all we go here and then in the end we might do some contract test integration test between our systems but as long as our acceptance tests which are core grade unit tests work i'm fine now where do we do this on well we're in domain driven design community so if you look at the bounded context it has a model for a purpose it is a unit of consistent language we can do tests on here right tests are also part of that bounded context the bounded context language is represented in the tests as well as in the code as well as what we speak etc etc so how would that look is let's say in the middle and i'm using a hexagonal or ports an adaptor's architecture but in the middle i have my domain model represented in code right with objects in this case i'm an object-oriented programmer you can do this functional as well it doesn't really matter but the model is exposed in code and what you see is at the top i have my acceptance test and my acceptance test will run on the port that goes inside the domain and then i mock away every object or every connection that's outside my domain model i'll mock that away and now my acceptance scenario will test my full domain and these are really the sociable tests from the highest level and when we go deeper you'll see that oh maybe this one object here is really complex so i need to create a solitary test and maybe that object is really complex so i'll make a solitary test right and maybe these three objects together is the aggregate so i also make a social more sociable tester right so as you see there's no one strategy for me the goal is to have this acceptance scenario run against my domain model and that's my end goal as long as these succeed it's fine but of course this has long feedback that's the downside of it so i need to go in depth

so how would that look in our polarity map again here you see the solitary test on the left you see the sociable test on the right and there you can say well the good thing about the solitary test i tested in isolation fast feedback on failure but if i go to the negative it's cascading changes on mocks and stubs and the loss of unit of work cohesiveness right so we can fix that with the sociable tests which are coherent no mocking or coupler but failure of bug in other classes and slower feedback of failure right balance we need to constantly balance these two and i'll later describe how we can balance this right but as you can see on the top my goal is to feeling secure to change the code and my fear is cascading changes so as you can see there's no one way and if we look at autonomy again right autonomy sits now in the middle how can i get these two into balance now then let's go to autonomy and teams and there's this individual and interaction over processes and tools right an individual can be autonomous and so can be a team a team is a collection of individuals that can either work as one autonomous team or as a group of autonomous individuals well right language and meanings would be crucial the nuance here is crucial so i have we have to break it to you but we are in the end all hurt animals that really really need to be liked by other people and get that confirmation it's been described in cultural anthropology a lot in sociology and as soon as we start talking about relationships and things get personal we get uncomfortable that's the problem we might feel unsafe because rejection is around the corner that's why we love our precise technical problems so much right i don't have to deal with other people but the thing here is isolation in a person is is not good for a person right we identify ourselves through others so we need to have that heard feeling we need to have that feeling that we belong to someone there's actually a lot of tests one test that went on in the united states when they still isolate people in prison right when they had that behavior and they figure out it didn't work they didn't self-reflect because they couldn't reflect because in order to reflect you need the other right you need that connectiveness so that's the paradox we want to be autonomous but at the same time we want to belong to a group of people when we act as a group of autonomous individuals and don't feel like a hurt we lose that feeling of belonging right and in perceived individual and autonomy and perceived team monument what works for any team differs that's really context depending on a team same as all my bounded contacts are context dependents and what works depends on that but they have to be on the same page because otherwise things can get messy and we can turn into a dictatorship right so imagine you have a nice development team working on a product everyone's doing their job but there's one person that seems to call all the shots it can be a tech lead that can be the person that's the longest there uh it's probably the person with the most knowledge that person has undocumented knowledge most likely and that's a problem this person can be brilliant and building the best product but let's use rigs right so the netherlands they call it the bus factor i would now rather like to call the lottery factor so a colleague told me that so if this person would win the lottery person is gone from a team what now but on the other hand you know it can also be nice to have a lead developer making decisions again we are hurt animals and sometimes we like the dog making the decision for us guide us right guide us to our home so what we have here is an autonomous team with one autonomous individual that has most power which can lead to undesired behavior and that can grow because we don't want to lose that person we get dependent on the person right you get the downside of the laminate scat you know the polarity and if we don't switch and we don't manage that it becomes worse or worse and worse a person can work in isolation because we assume the person is doing the right thing meanwhile we you have an autonomous team where stuff is lurking beneath the surface this can grow and grow and eventually explode leadership needs to turn that ship around right it's leadership that need to manage that again we need to do some sense making to see where are we at and we need to be able to talk about it define the boundaries what do we expect of each other in terms of domains teams but most importantly about what it means in terms of behavior as an individual and as a member so because autonomy is a bulk concept it can be misused like said dictatorship is a potential risk but we've also seen autonomy being used as an excuse as a means to shift the blame to someone else example an organization read about autonomous teams want to do it maybe microservice is right and there's your first flag don't just copy-paste stuff because it works for someone else watch on one of our previous talk to talk about that and about cargo calling and the copy haste based hell that's mutating but one very important note here is that culture is crucial surprise within this particular organization there was fear fear of being held accountable distrust no room for failure and a lot of pressure so for the teams autonomy sounded pretty good because it would get some of the pressure off or so they assumed for management autonomy sounded good because they interpreted that as full responsibility with the teams which was good for their cover your ass culture right it didn't look too long for this to clash deadlines miss no clear communication and lessons learned moving toward autonomy because it works somewhere else or because it might help you cover your ass won't bring you anything sounds trivial but this happens you need someone to expose this behavior and consequences in the case of organization it was us doing that instead of focusing on autonomy we start with building trust and create a shared meaning we need a shared meaning we need a shared purpose and this is what drive mr pink always also said right we need a purpose and well what do you know domain driven design and abounded context can help you with that because of down at context it's a model for a specific purpose we know this is what we do it for this is what we build it for for this customer we're building this model right and then we can use things like context mapping and domain design to see the connectedness with other teams which we're going to talk about that later and within something nick tuna the ddd crew up uh is this bounded context canvas where you can describe that description right this is really nice because now together with the team we collaboratively model our purpose together and we see what are our inbound and outbound communication and this is how we stay connected and define these bounded context problems but it's not only about boundaries uh it's also the way we develop our work and one thing i see in in each phase of each uh sorts of programming and now you'll see load code popping up is that people have a problem here it says application teams grows it slows down because multiple developers compete to change the same code first of all i don't see that as a problem i see that as oh maybe we need to talk together and see how this fit together but they see it as a problem and that's the thing right it's not a problem so what do they do they actually deliver a different pace so they're going to do branching nice you got a branch you get a branch everyone gets a branch well do you hear the isolation coming in here right just working your isolated thing on your own purpose and you'll lose connection there's no balance here so what you'll see in that in that thing is that the feedback is late right so this is git flow by the way and as you can see as if if this is the main line you see there's no real feedback here because this happened and you know long feedback and that can cause to some cost fallacy well i've been working on this course a really long time right and someone else would say well yeah but that's not what we discussed i mean i thought it would be a different design and connected differently okay let's just take some duct tape and fix that and we'll call it technical debt which it's not it's craft there's slow feedback he wasn't connected to show that again on the polarity map you'll see right the branch gives you freedom individual creativity but you have loss of cohesive mental models well you know bounded context is a shared model so we're losing that the longer we are on the branch but the positive effect of the trunk based so let's say we do only mainline development is care for the whole shared mental model team effort but we have excessive conformity so trunk base people see trunk based as being only on the trunk which is not you can use branches and how would we check that is look when we observe our team and we see people competing to just change the same code maybe we need to start pairing and lobbying right and at some point you can find signals that you're too long on that main line then we go back and find the branch right balance there's no one way to do it don't don't go on and this is not trunk based development that's defined right in trunk based development you can do branching it's not about only committing on the mainline code you could do branching but don't take one approach over the other so don't always take the trunk based development or i mean mainline commits and don't always take the branch implements balance it choose every time what you're gonna need

so then to my favorite topic which is autonomy between teams i already talked about it with the context map so how does my team relate to the other and and people think well let's do bounded contacts microservices so we have autonomy and and there again we can go towards isolation again yeah so in this case autonomy between teams microservices and can go on to a lot more can la lead to the ivory towers to the silos that's not what we want so one thing that happened a few years ago is this book called team topology that come out right and team topology really loves domain driven design while team topology is about teams and about fast flow organizing business and technology for fast flow of their teams domain-driven design is about autonomy in models right and these really work well together because these teams for fast flow will be owners of these models and the models has relationship with each other and that's what i'm going to talk about really quickly is if you look at what they describe the fourth fundamental team topology is you have these perhaps a platform team you don't always need a platform team but let's say you need but in the end it's about this middle team the stream aligned team right the stream aligned team is picking up value for the customer and releasing it in a fast flow and because they cannot do that always by themselves because there's this thing called cognitive load because that's what we should think about right about limiting the size of software services and product to the cognitive load that the team can handle so the stream align team could be in a lot of complexity well one thing we'll talk i'll talk about later is the enabling team right where you need some new technology some new testing framework perhaps or a new database technology then another team can help you uh periodically to implement that but a team can also be accountable for one big ball of mud bounded context right and that can be complex and they will put on another team and that's what we don't want we don't want two teams working on the same well context in that way because they use different languages and that's what we don't want so what do we do because we cannot put one team on it because the cognitive load is too high now again domain driven design gives can give you an answer here eric evan described this there's no one way of doing it we don't all want bounded context with anti-corruption layers on it and and just be isolated no in this case what we could start doing is form a partnership clearly define two bounded contacts within that big ball of mud see if we can do that and set up a cooperative relationship between the two teams and these teams establish a process for coordinating planning of development so you lose a bit of autonomy here but you decrease the cognitive load yeah and and that's what domain-driven design is all about it's about trade-offs none of these strategic patterns are by default bad they just are right even the confirmation pattern people say the confirmation strategic pattern can be a bad thing it doesn't have to be it's about trade-offs so don't think about the um utopia that every bounded context is autonomous no that's not what it is um there's these several patterns eric kevin's clearly discussed and there's more after that you can use and it's all about that balance and i was already talking about that enabling team right so we have to stream align team and they can afford partnership with other streamlined teams and they need a platform team maybe maybe there's a complicated subsystem team this like for instance we need some data science for uh doing much doing our stream align team but then we go to this enabling team right i i already tell you about the enabling team but the thing about enabling teams there's a danger here if we just have an enabling team like for instance a test team or a architectural team right and they act we need to manage that they actively be avoid becoming ivory towers of knowledge dictating technical choices for other teams to follow this is what we usually see as a pattern we have a architectural team dictating technical choices or a testing team in isolation dictating this and here's this brilliant comic agile right that says there's one team is constantly developing huge number of features well nobody is using it anymore we got to stay connected an architectural team in isolation is that ivory tower team they're not helping teams an enabling team is a supporting team there to help the other teams and they have an end date what's the purpose of that enabling team right because what happens usually if we stay in that isolation right they have freedom they can go fast it's nice work ahead of new technology they have uniqueness but if they stay too long at isolation they have lots of equality isolation they will become selfish but they will also get the downside of the collaboration right they themselves will get high cognitive load they self will guess excessive conformity and sameness and this is how a polarity works as well if you stay too long in one polarity you get the bat of the boat yeah and you're becoming that tower of babel instead of customer centric and enabling teams customer here are the stream align teams and then let's talk about my second favorite topic after branching is of course the skilled agile frameworks which has their place and which can be implemented correctly but what i see here is a lot of isolation patterns right so we need to manage this we need to manage the connectiveness and the relationship through these polarity modes

so autonomy organization so let's talk about this last level right autonomy in an organization which is again a continuous negotiation and this sounds this sounds somewhat paradox right an autonomous organization but this organization can consist of autonomous teams individuals or maybe there's no autonomy of all the thing is it's a continuous negotiation what do we mean with autonomy in organization where do we need provide autonomy and what does it bring what does autonomy mean for the way we collaborate what's my role all very important question to consider in this context right and let's start with vision boundaries for both let's start about remembering the thing we said about boundaries and vision in the beginning of the talk define the boundaries in the shape of a vision is what the leader team teams should do the vision comes from leadership what i hear when there's need for efficient within team is in fact a call for boundary tell us what the boundaries are in which we can decide how to work this is also a job for a software architect right we define the boundaries constraints for innovation we don't decide how people do it so if you want something to be done as a leader you set the boundaries this is what i want and what do you need for it so basically that's what leadership should do right so people saying if we all have autonomous teams we don't need leadership anymore yes we do they manage these polarities and there's a difference between uh the old school machiavelli leaders right it's command and control it's ends justify the means and what you see nowadays a shift towards the collaborative leadership right they set boundaries they set constraint they make sure that the autonomous teams stay connected with each other and this is leadership this is middle management and this is uh

architects that might sit in between the teams and i say in between the teams and not above the teams because they're equal right and that's where our topic is it's not a free pass it still requires conversation right that's what we need we need someone to create these connectedness and create this conversation and we cannot stress enough better collaboration direct communication is not behavior if we want to expect something from a team it needs to be observable right it needs to say what outcome not output not tasks what outcome can i expect from you uh well evelyn can talk a lot about that season 4 is not here but she will discuss that in a different talk later on what exactly is behavior and how could we do it so direct communication is not behavior so who calls a shot i already told you that with autonomy it can be confusing who gets to call the shot which makes a decision which decision are you allowed to make that's a hard question in general but especially when there's autonomous team it has to be made explicit which again is a continuous negotiation boundaries this is this is i got from the brilliant root milan and from j bloom boundaries you create in negotiation yeah it's a continuous negotiation there are no hard boundaries usually they're not really hard it's they're not fixed it's a continuous negotiation if a boundary is fixed it's called a wall it's not a boundary anymore so if you agree about what autonomy means what you can expect from each other and where the boundaries are you can also determine who gets to make the decision who is responsible for what eventually leadership calls a shot obviously ranking and budgets but there have to be that continuous negotiation with the teams and people in the organization it's up to leadership to collaborate on that thing right collaborate leadership that's the thing we need if we have autonomous teams we cannot have a a person on top who do a machiavelli type of dictator leadership they don't match unfortunately it's a negotiation it's a skill now we gave them autonomy and why aren't they doing anything with it right and that's the frustration on most leadership teams they're like we gave him that so why is no one taking ownership and responsibility i asked him to turn around that question what can you do to help them take that ownership because it's not like a you say well here's your ownership goal that person also needs to be able to feel okay to take that ownership right so that's the question you should have asked to the the team do you want ownership how do you want it again here you see the negotiation right and this polarity map will help you it's that task of the leadership to make sure and manage these polarities of autonomy and connectiveness and isolation right so what's holding them that what they're afraid of which risks do you see and that's collaborative leadership right it's setting visions it's setting this is where we want to go with the company what do you need for it how do we set the boundaries how do we set the structure together that works for you again please don't copy-paste any spotify model that doesn't exist anyway what does the team need which boundaries and that's context for sending don't come with the mature maturity model maturity model learning is not linear it's context dependent as we know in domain driven design that's why we have to monitor contacts so when there's autonomy everywhere do we still need managers i already tell you managers we still need them but they can exist in several roles or forums that's again depending on your company but i believe middle management is a crucial role for starting this strategy right higher management is about option middle management is about strategy jay bloom really described this well if you have a football team you have the people above on the top they set options but really who sets the strategy is the coach right it's the middle manager sort of saying that's how we should perceive it as well there needs to be shift and they are in the middle they have a hard job but managers still exist they need to change their behavior as well from a machiavelli style to a collaborative style so how would that look like in in a polarity map so j bloom actually doesn't call it agency he calls it or autonomy he calls it agency that's what we want right it's the balance between decentralized decision and centralized decision and if we don't balance these two then we get into indecisiveness so centralized decision means empowering to the group group can coordinate group active group can actively decide and everyone feels included that's centralized decision by a manager right but the problem here is is that we can have queues we can be dependent on this decision we have lack of individual accountability no creativity or spontaneously and disempowering to the individual so we also want to have decentralized decisions and again it's a it's a lemnis god right which is empowering the individually it's spontaneous and it's individual acting decisively but the problem with this central decision is that the group cannot coordinate they get fear of missing out and burn off consequences so we need that middle management with sort of like a team topology style managing these polarities managing the connectiveness between the team we need to have software architects either in the team as an as a virtual team together working on that contacts map how do the models relate to each other how does the autonomy in the team come together right and one thing one thing to be aware of is that patterns of autonomy and isolation are fractile if you have isolated patches at the top you will find them in the bottom as well they go and cascade down to your organization so if you see a isolated pattern inside the team probably what you will see is that the managers are isolation there's no feedback this is what i usually find weird in this organization is that a middle manager doesn't get any feedback from the teams end of the year performance there's no feedback from teams and for me that's weird because the middle manager is there to set strategies constraints and vision collaboratively with the team so who could decide that they're doing their job correctly it's mostly in my opinion the team and of course their leadership did they help create that vision of the company

so autonomy is that what we really really want well we need to define and negotiate boundaries continuously and we need to manage the polarities and that's the end of the talk i hope you enjoyed and we always say please leave the judging to the cats the left ones are mine as you saw before these are my cats and unfortunately evelyn is here but she'll be happy that her cat is brilliantly displayed on this talk again as we always do so we have a twitter account both of us please feel free to dm us or tweet us we have an email we have a website and if you want to contact us let us know thank you very much for having me here so far and hopefully there are some questions i can answer them thank you

okay thank you very much and thank you on your sharing and our audience have some questions in slido so i need to share my screen wait a moment yeah

okay so kenny can can you see my screen yeah i can see it okay the first question is can you explain more about the social technical because i think it is very abstracted concept

yeah so i don't consider myself the expert on social technical i know uh a few people who are so this is my explanation social technical considered and please follow trond or j bloom and root milan they can explain this a lot better but here's my view on it usually what you see in companies is that we only take account the technical so the way i describe it let's say if you work in the office and if you're back at the office again due to corona we live inside a or we might work inside a open office plan right so we all work in one open office and if i go to companies and i see them using this and that's a technical design right that's the technical design of the open office plan it's technically it's correct we can put everyone there technically brilliant but when we look at the social part which is the which is the uh which is actually two parts is the cognitive part and which is the social part which is a difference you'll see that how does the interaction go so they tried to use this technical design to improve communication but they saw it work at someone else now they put it inside their company and what you'll see is that at most open office spaces actually the the the everything went down except the costs right so the communication goes down because we all have these nice headphones on because we're all getting too much noise and cognitive load right there's too much cognition going on i get too much inside so social it goes down again and these two interact with each other as you will see in his open office plan now the open office plan works because people collaboratively designed them so where it worked they designed that together so there's a brilliant talk by joe wright at lean agile scotland talking about the history of it and there it worked why because they took the social account and the social is more of like towards the culture part the cognition so they looked what are your needs what are your social needs and what's the behavior inside here and let's collaboratively decide designed open office space there it worked and then you saw other companies copy paste in that because they saw it improved technically it improved the communication it improved blah blah blah so they thought okay let's technically move it away as a design in my company but they neglected the social part and the same goes inside inside your software development as an architect right if you develop these autonomous system or microservices you need to take into account the social part within domain-driven design you see that the strategic patterns are really social patterns most of them right the partnership i talked about that's really a social pattern how do we interact with each other and usually we just take in account okay let's just split these software in part boundaries but we don't take in account what does that happen to the culture the team dynamics that's why team topology the strategic patterns get more important now doesn't need to say that the tactical isn't important they need to be in balance so i hope that answers the question this is how i see it but please there's multiple people who who can talk about this in the scene and i always start at the root milan

uh c is already i don't know how long in the architecture world and sees a brilliant explainer okay thank you for your experience and the second question is do you think the level of autonomy should be given depends on people's majority but will that slow down people's growth to become measures

yeah so here's again it's the polarity right what can i what can my team do now and that's an open discussion with the team right this is what the purpose is we want to grow towards fear where do you feel comfortable with taking autonomy here right so autonomy you can give it to a team but it also means that the team wants to have that autonomy some people are afraid maybe to get that autonomy but if you keep that stable that that balance stable yes people won't grow to become mature so that's only the the skill you want to constantly manage as a manager right or as a architect that's the polarity map so that's the continuous improvement that you can embed in your software development flow is okay where can we get more autonomy and what do we need for it a good a good thing maturity mapping it's called so usually what we do is have a maturity model in our learning but you can also do maturity mapping which is based on worldly mapping and there you can go context dependent how can we grow as a where's the boundaries and how can we grow as a as a team towards that more maturity right but context dependent for our team so it can be that one person has all the information about that new uh about that new technology let's say we do surface there's one person who's brilliant at it but the rest not okay what strategy will we take now to make sure other people will do it so bearing mobbing and then four weeks later you do it again or two weeks later and you constantly keep sense making to see how is it going now and how can we change now so it's a it's not a static concept it's team dynamic heidi heinfeld has a brilliant book about team dynamics it's ever evolved it's not static

thank you for your answer and the next question is how can we distinguish systems that have full anonymity from those with particular anonymities

wow that's a really good question i need to think about so how can the skin which is another full autonomy from so it depends right first of all do you want to have full autonomy and what does it mean so for me i rather have agency if i get a job i can fulfill it myself i can have the mastery of purpose to do it myself that's what mr pink talks about and if someone couldn't do that and meet someone else then it's partial autonomy and the strategic patterns can help there indeed to map these out right what's the level of maturity and is that okay or i mean what's the level of autonomy and is that okay in this given context for instance if i'm working in a core model or domain model right i might want to have more autonomy because i need to iterate on that model a lot if i'm in a supportive domain model maybe i'm okay with having less autonomy so that would be the first question and i'm okay with a with a more tight partnership between teams because i don't have to go that fast in that parts of the software structure so i would do probably the too long and read do some contacts mapping on the current system and then map the strategic patterns on them and see and these strategic patterns are on a scale of autonomy themselves right so for for instance the confirmation pattern is like low autonomy the anti-corruption layer is a bit higher autonomy but there's a different scale as well that's how i would do it context method

okay thank you very much and then the final question is anonymous coding more or less anatomy

well there's the balance again uh and that's the conversation you need to have with you in your team right so usually what i do is we pick up a new for instance a user story or or something new i start with the connectiveness right i start let's do maybe some mob programming this morning let's let's figure out together how we want to design this then we mop that and and while we're mobbing we're creating a shared mindset and connectiveness but you know uh we cannot maintain that for a long time it's the tight balance again so what i do at some point people are clear enough and they say okay you can do this you can do that and i can do this everyone will code but never work on their own branch they will just keep committing to the same uh main branch then so everyone stays connected so people were saying how about code reviews right they say i need to go on a branch because i need to have a pr for me a review is continuous so if people will just commit on the main line then i if i start developing and i want to commit on mainline i need to pull their commits i see what they did if i see something that that is like oh this is not what i expected i i will go back and talk to them again and that's the lemony scot right so what are the signals that you are going towards isolation or towards too much uh sameness and that's the balance you need to talk to as a team in that polarity map so look at polarity mapping me he and evelyn talked about it on the event store so i'll share that blog post later and start doing that with your team so ins you get that trigger oh this is not what i expect let's pair up again